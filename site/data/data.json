{"functions": {"appfat_get_error_string": {"address": ["0x40102A"], "explanation": "appfat_get_error_string returns a formatted error message based on the given\nerror code.", "args": [{"name": "error_code", "type": "uint32_t"}], "returns": {"type": "char *"}}, "appfat_get_DD_error_string": {"address": ["0x4010CE"], "explanation": "appfat_get_DD_error_string stores a formatted error message in error_buf\nbased on the given DirectDraw error code.", "args": [{"name": "error_code", "type": "uint32_t"}, {"name": "error_buf", "type": "char *"}, {"name": "error_buf_len", "type": "int"}], "returns": {"type": "void"}}, "appfat_get_DS_error_string": {"address": ["0x401831"], "explanation": "appfat_get_DS_error_string stores a formatted error message in error_buf\nbased on the given DirectSound error code.", "args": [{"name": "error_code", "type": "uint32_t"}, {"name": "error_buf", "type": "char *"}, {"name": "error_buf_len", "type": "int"}], "returns": {"type": "void"}}, "appfat_get_last_error": {"address": ["0x40193A"], "explanation": "appfat_get_last_error returns a formatted error message of the last error.", "args": [], "returns": {"type": "char *"}}, "appfat_terminate_message_box": {"address": ["0x401947"], "explanation": "appfat_terminate_message_box terminates the game and displays an error\nmessage box.", "args": [{"name": "format", "type": "char *"}], "returns": {"type": "void"}}, "appfat_message_box": {"address": ["0x401975"], "explanation": "appfat_message_box displays an error message box based on the given format\nstring and variable argument list.", "args": [{"name": "format", "type": "char *"}, {"name": "va", "type": "va_list"}], "returns": {"type": "void"}}, "appfat_cleanup": {"address": ["0x4019C7"], "explanation": "appfat_cleanup cleans up after a fatal application error.", "args": [], "returns": {"type": "void"}}, "appfat_draw_message_box": {"address": ["0x401A30"], "explanation": "appfat_draw_message_box renders an in-game message box with the given text\non screen.", "args": [{"name": "format", "type": "char *"}], "returns": {"type": "void"}}, "appfat_DD_assert": {"address": ["0x401A65"], "explanation": "appfat_DD_assert terminates the game with a DirectDraw assertion message box.", "args": [{"name": "error_code", "type": "uint32_t"}, {"name": "log_line_nr", "type": "int"}, {"name": "log_file_path", "type": "char *"}], "returns": {"type": "void"}}, "appfat_DS_assert": {"address": ["0x401A88"], "explanation": "appfat_DS_assert terminates the game with a DirectSound assertion message\nbox.", "args": [{"name": "error_code", "type": "uint32_t"}, {"name": "log_line_nr", "type": "int"}, {"name": "log_file_path", "type": "char *"}], "returns": {"type": "void"}}, "appfat_terminate_dialog_box": {"address": ["0x401B3D"], "explanation": "appfat_terminate_dialog_box terminates the game and displays an error dialog\nbox based on the given template id.", "args": [{"name": "template_id", "type": "int"}, {"name": "error_code", "type": "uint32_t"}, {"name": "log_file_path", "type": "char *"}, {"name": "log_line_nr", "type": "int"}], "returns": {"type": "void"}}, "appfat_dialog_box": {"address": ["0x401C2E"], "explanation": "appfat_dialog_box displays an error dialog box based on the given template id\nand error code.", "args": [{"name": "template_id", "type": "template_id"}, {"name": "error_code", "type": "uint32_t"}, {"name": "log_file_path", "type": "char *"}, {"name": "log_line_nr", "type": "int"}], "returns": {"type": "void"}}, "appfat_terminate_file_error_dialog": {"address": ["0x401C9C"], "explanation": "appfat_terminate_file_error_dialog terminates the game with a file not found\nerror dialog.", "args": [{"name": "error", "type": "char *"}], "returns": {"type": "void"}}, "appfat_terminate_disk_space_error_dialog": {"address": ["0x401CE1"], "explanation": "appfat_terminate_disk_space_error_dialog terminates the game with an out of\ndisk space error dialog.", "args": [{"name": "error", "type": "char *"}], "returns": {"type": "void"}}, "appfat_terminate_insert_cd_error_dialog": {"address": ["0x401D1D"], "explanation": "appfat_terminate_insert_cd_error_dialog terminates the game with an insert CD\nerror dialog.", "args": [], "returns": {"type": "bool32_t"}}, "appfat_terminate_directory_error_dialog": {"address": ["0x401D68"], "explanation": "appfat_terminate_directory_error_dialog terminates the game with a read-only\ndirectory error dialog.", "args": [{"name": "error", "type": "char *"}], "returns": {"type": "void"}}, "automap_init": {"address": ["0x401DA4"], "explanation": "automap_init initializes the automap.", "args": [], "returns": {"type": "void"}}, "automap_draw": {"address": ["0x401FBD"], "explanation": "automap_draw renders the automap on screen.", "args": [], "returns": {"type": "void"}}, "capture_screenshot": {"address": ["0x40311B"], "explanation": "capture_screenshot captures a screenshot and stores it within the game\ndirectory as \"screenXX.pcx\". While the screenshot is being taken, the game is\npaused temporarily as indicated by the red screen.", "args": [], "returns": {"type": "void"}}, "codec_decode": {"address": ["0x4034D9"], "explanation": "codec_decode decodes the given memory buffer in-place, and returns the number\nof bytes decoded.", "args": [{"name": "src_dst", "type": "void *"}, {"name": "size", "type": "int"}, {"name": "password", "type": "char *"}], "returns": {"type": "int"}}, "j_sha1_reset": {"address": ["0x4035D6"], "explanation": "j_sha1_reset resets the global SHA-1 contexts.", "args": [], "returns": {"type": "void"}}, "codec_init_key": {"address": ["0x4035DB"], "explanation": "codec_init_key initializes the codec key.", "args": [{"name": "unused", "type": "int"}, {"name": "password", "type": "char *"}], "returns": {"type": "void"}}, "codec_get_encoded_len": {"address": ["0x4036AC"], "explanation": "codec_get_encoded_len returns the length in bytes of the codec encoding of an\ninput buffer of length n.", "args": [{"name": "n", "type": "int"}], "returns": {"type": "int"}}, "codec_encode": {"address": ["0x4036BE"], "explanation": "codec_encode encodes the given memory buffer in-place.", "args": [{"name": "src_dst", "type": "void *"}, {"name": "size", "type": "int"}, {"name": "size_64", "type": "int"}, {"name": "password", "type": "char *"}], "returns": {"type": "void"}}, "control_draw_speedbook": {"address": ["0x403A8E"], "psx_ref": ["0x800366D8"], "psx_def": ["void DrawSpellBook__Fb(bool DrawBg)"], "explanation": "control_draw_speedbook renders the speedbook on screen.", "args": [], "returns": {"type": "void"}}, "control_draw_life_orb": {"address": ["0x40435B"], "explanation": "control_draw_life_orb renders the life orb on screen.", "args": [], "returns": {"type": "void"}}, "control_draw_mana_orb": {"address": ["0x404475"], "explanation": "control_draw_mana_orb renders the mana orb on screen.", "args": [], "returns": {"type": "void"}}, "control_load_graphics": {"address": ["0x404616"], "explanation": "control_load_graphics loads control panel graphics.", "args": [], "returns": {"type": "void"}}, "control_draw_panel_buttons": {"address": ["0x404959"], "explanation": "control_draw_panel_buttons renders the control panel buttons on screen.", "args": [], "returns": {"type": "void"}}, "control_cleanup": {"address": ["0x405181"], "explanation": "control_cleanup releases the resources used by the control panel.", "args": [], "returns": {"type": "void"}}, "control_draw_description_box": {"address": ["0x4052C8"], "explanation": "control_draw_description_box renders the description box on screen.", "args": [], "returns": {"type": "void"}}, "control_draw_character_screen": {"address": ["0x4056D8"], "explanation": "control_draw_character_screen renders the character screen on screen.", "args": [], "returns": {"type": "void"}}, "control_draw_level_up_button": {"address": ["0x406234"], "explanation": "control_draw_level_up_button renders a level up button on screen.", "args": [], "returns": {"type": "void"}}, "control_draw_durability_icons": {"address": ["0x406408"], "explanation": "control_draw_durability_icons renders durability icons on screen.", "args": [], "returns": {"type": "void"}}, "control_draw_red_hue": {"address": ["0x406508"], "explanation": "control_draw_red_hue renders the screen in red hue.", "args": [], "returns": {"type": "void"}}, "control_get_spell_type": {"address": ["0x406592"], "explanation": "control_get_spell_type returns the spell type of the given spell ID, and\nreport whether is may be cast in town.", "args": [{"name": "spell_id", "type": "spell_id"}, {"name": "check_town", "type": "bool32_t"}], "returns": {"type": "spell_type"}}, "control_draw_spellbook": {"address": ["0x406667"], "explanation": "control_draw_spellbook renders the spellbook on screen.", "args": [], "returns": {"type": "void"}}, "control_get_gold_quantity": {"address": ["0x406AF8"], "explanation": "control_get_gold_quantity returns the gramatically correct quantity for the\ngiven amount of gold (i.e. \"piece\" or \"pieces\").", "args": [{"name": "gold", "type": "int"}], "returns": {"type": "char *"}}, "control_draw_gold_drop_box": {"address": ["0x406B08"], "explanation": "control_draw_gold_drop_box renders the gold drop box on screen.", "args": [{"name": "amount", "type": "int"}], "returns": {"type": "void"}}, "control_draw_talk_panel": {"address": ["0x406E6A"], "explanation": "control_draw_talk_panel renders the talk panel on screen.", "args": [], "returns": {"type": "void"}}, "cursor_init_graphics": {"address": ["0x40740A"], "psx_ref": ["0x80037734"], "psx_def": ["void InitCursor__Fv()"], "explanation": "cursor_init_graphics initializes the cursor graphics.", "args": [], "returns": {"type": "void"}}, "cursor_cleanup": {"address": ["0x407420"], "psx_ref": ["0x8003773C"], "psx_def": ["void FreeCursor__Fv()"], "explanation": "cursor_cleanup releases the resources used by the cursor.", "args": [], "returns": {"type": "void"}}, "cursor_set_item_cursor_id": {"address": ["0x407437"], "psx_ref": ["0x80037744"], "psx_def": ["void SetICursor__Fi(int i)"], "explanation": "cursor_set_item_cursor_id sets the item cursor ID.", "args": [{"name": "cursor_id", "type": "cursor_id"}], "returns": {"type": "void"}}, "cursor_set": {"address": ["0x40746B"], "psx_ref": ["0x800377A0"], "psx_def": ["void SetCursor__Fi(int i)"], "explanation": "cursor_set sets the cursor to the specified cursor ID.", "args": [{"name": "cursor_id", "type": "cursor_id"}], "returns": {"type": "void"}}, "j_cursor_set": {"address": ["0x40748E"], "psx_ref": ["0x80037804"], "psx_def": ["void NewCursor__Fi(int i)"], "explanation": "j_cursor_set sets the cursor to the specified cursor ID.", "args": [{"name": "cursor_id", "type": "cursor_id"}], "returns": {"type": "void"}}, "cursor_init_cursor_targets": {"address": ["0x407493"], "psx_ref": ["0x80037824"], "psx_def": ["void InitLevelCursor__Fv()"], "explanation": "cursor_init_cursor_targets initializes the game state of the cursor targets.", "args": [], "returns": {"type": "void"}}, "cursor_print_town_portal_text_on_hover": {"address": ["0x4074D0"], "psx_ref": ["0x80037884"], "psx_def": ["void CheckTown__Fv()"], "explanation": "cursor_print_town_portal_text_on_hover prints a description of town portals\non mouse hover.", "args": [], "returns": {"type": "void"}}, "cursor_print_red_portal_text_on_hover": {"address": ["0x4075FD"], "psx_ref": ["0x80037B18"], "psx_def": ["void CheckRportal__Fv()"], "explanation": "cursor_print_red_portal_text_on_hover prints a description of red portals on\nmouse hover.", "args": [], "returns": {"type": "void"}}, "cursor_process": {"address": ["0x407729"], "psx_ref": ["0x80037D80"], "psx_def": ["void CheckCursMove__Fv()"], "explanation": "cursor_process processes any cursor movements, since the last game tick.", "args": [], "returns": {"type": "void"}}, "debug_load_graphics": {"address": ["0x4086F4"], "explanation": "debug_load_graphics loads debugging graphics.", "args": [], "returns": {"type": "void"}}, "debug_cleanup": {"address": ["0x40870F"], "explanation": "debug_cleanup releases the resources used for debugging.", "args": [], "returns": {"type": "void"}}, "j_diablo_cpp_init": {"address": ["0x4087B1"], "explanation": "j_diablo_cpp_init_1 initializes the C++ runtime of diablo.cpp.", "args": [], "returns": {"type": "void"}}, "diablo_cpp_init": {"address": ["0x4087B6"], "explanation": "diablo_cpp_init_1 initializes the C++ runtime of diablo.cpp.", "args": [], "returns": {"type": "void"}}, "diablo_cleanup_current_level": {"address": ["0x4087C1"], "psx_ref": ["0x80037FAC"], "psx_def": ["void FreeGameMem__Fv()"], "explanation": "diablo_cleanup_current_level releases the resources of the current level.", "args": [], "returns": {"type": "void"}}, "diablo_cleanup": {"address": ["0x408ADB"], "psx_ref": ["0x800380D4"], "psx_def": ["void free_game__Fv()"], "explanation": "diablo_cleanup releases the resoures used by the game.", "args": [], "returns": {"type": "void"}}, "diablo_get_not_running": {"address": ["0x408B1E"], "explanation": "diablo_get_not_running reports whether the game is not running already.", "args": [], "returns": {"type": "bool32_t"}}, "diablo_parse_flags": {"address": ["0x408CB1"], "explanation": "diablo_parse_flags parses command-line flags from the given command line arguments.", "args": [{"name": "args", "type": "char *"}], "returns": {"type": "void"}}, "diablo_load_level_graphics": {"address": ["0x40A391"], "explanation": "diablo_load_level_graphics loads the tile graphics of the active dungeon\ntype.", "args": [], "returns": {"type": "void"}}, "diablo_create_level": {"address": ["0x40A4E1"], "psx_ref": ["0x80038A98"], "psx_def": ["void CreateLevel__Fi(int lvldir)"], "explanation": "diablo_create_level creates the level, either Tristram or a random dungeon\nbased on the dungeon type and level entry.", "args": [{"name": "entry", "type": "int"}], "returns": {"type": "void"}}, "diablo_load_game_level": {"address": ["0x40A5A4"], "psx_ref": ["0x80039270"], "psx_def": ["void LoadGameLevel__FUci(unsigned char firstflag, int lvldir)"], "explanation": "diablo_load_game_level loads the game level.", "args": [{"name": "from_save", "type": "bool32_t"}, {"name": "entry", "type": "int"}], "returns": {"type": "void"}}, "diablo_game_loop": {"address": ["0x40AAE3"], "psx_ref": ["0x80039E58"], "psx_def": ["void game_loop__FUc(unsigned char bStartup)"], "explanation": "diablo_game_loop runs the game loop.", "args": [{"name": "startup", "type": "bool32_t"}], "returns": {"type": "void"}}, "diablo_process_game_logic": {"address": ["0x40AB33"], "psx_ref": ["0x80039BC8"], "psx_def": ["void game_logic__Fv()"], "explanation": "diablo_process_game_logic processes any game state changes, since the last\ngame tick.", "args": [], "returns": {"type": "void"}}, "diablo_set_timeout_cursor": {"address": ["0x40ABE7"], "psx_ref": ["0x80039DB0"], "psx_def": ["void timeout_cursor__FUc(unsigned char bTimeout)"], "explanation": "diablo_set_timeout_cursor sets the cursor to an hourglass on network timeout.", "args": [{"name": "timeout", "type": "bool32_t"}], "returns": {"type": "void"}}, "doom_draw": {"address": ["0x40AD74"], "explanation": "doom_draw renders a map of the stars on screen.", "args": [], "returns": {"type": "void"}}, "drlg_l1_reset_maps": {"address": ["0x40ADD6"], "psx_ref": ["0x8013CEAC"], "psx_def": ["void DRLG_Init_Globals__Fv()"], "explanation": "drlg_l1_reset_maps resets the dungeon flag, player, NPC, dead, object,\nitem, missile and arch maps.", "args": [], "returns": {"type": "void"}}, "drlg_l1_load_dun": {"address": ["0x40AE79"], "psx_ref": ["0x8013CF64"], "explanation": "drlg_l1_load_dun loads tile IDs, monsters and objects from the given\ndungeon file.\nPSX sig: void LoadL1Dungeon__FPcii(char *sFileName, int vx, int vy)", "args": [{"name": "dun_path", "type": "char *"}, {"name": "view_col", "type": "int"}, {"name": "view_row", "type": "int"}], "returns": {"type": "void"}}, "drlg_l1_randomize_stone_floor": {"address": ["0x40AF65"], "psx_ref": ["0x8013CAC4"], "explanation": "drlg_l1_randomize_stone_floor randomizes floor tiles.\nPSX sig: void DRLG_L1Floor__Fv()", "args": [], "returns": {"type": "void"}}, "drlg_l1_init_piece_id_map": {"address": ["0x40AFB3"], "psx_ref": ["0x8013CBA8"], "psx_def": ["void DRLG_L1Pass3__Fv()"], "explanation": "drlg_l1_init_piece_id_map initializes the dungeon piece ID map.", "args": [], "returns": {"type": "void"}}, "drlg_l1_init_arches": {"address": ["0x40B0A5"], "psx_ref": ["0x8013CF5C"], "psx_def": ["void DRLG_InitL1Vals__Fv()"], "explanation": "drlg_l1_init_arches initializes arches.", "args": [], "returns": {"type": "void"}}, "drlg_l1_preload_dun": {"address": ["0x40B160"], "psx_ref": ["0x8013D138"], "explanation": "drlg_l1_preload_dun loads tile IDs from the given dungeon file.\nPSX sig: void LoadPreL1Dungeon__FPcii(char *sFileName, int vx, int vy)", "args": [{"name": "dun_path", "type": "char *"}, {"name": "view_col", "type": "int"}, {"name": "view_row", "type": "int"}], "returns": {"type": "void"}}, "drlg_l1_create_dungeon": {"address": ["0x40B229"], "psx_ref": ["0x80140E64"], "explanation": "drlg_l1_create_dungeon creates a random cathedral dungeon based on the\ngiven seed and level entry.\nPSX sig: void CreateL5Dungeon__FUii(unsigned int rseed, int entry)", "args": [{"name": "seed", "type": "uint32_t"}, {"name": "entry", "type": "int"}], "returns": {"type": "void"}}, "drlg_l1_load_quest_dun": {"address": ["0x40B276"], "psx_ref": ["0x8013CDA0"], "explanation": "drlg_l1_load_quest_dun loads tile IDs from the dungeon file of the active\nquest level.\nPSX sig: void DRLG_LoadL1SP__Fv()", "args": [], "returns": {"type": "void"}}, "drlg_l1_free_quest_dun": {"address": ["0x40B2F4"], "psx_ref": ["0x8013CE7C"], "explanation": "drlg_l1_free_quest_dun frees the dungeon file of the active quest level.\nPSX sig: void DRLG_FreeL1SP__Fv()", "args": [], "returns": {"type": "void"}}, "drlg_l1_generate_dungeon": {"address": ["0x40B306"], "psx_ref": ["0x80140930"], "explanation": "drlg_l1_generate_dungeon generates a cathedral dungeon based on the given\nlevel entry.\nPSX sig: void DRLG_L5__Fi(int entry)", "args": [{"name": "entry", "type": "int"}], "returns": {"type": "void"}}, "drlg_l1_place_door": {"address": ["0x40B56F"], "psx_ref": ["0x8013BCB0"], "explanation": "drlg_l1_place_door places a door at the given coordinate.\nPSX sig: void DRLG_PlaceDoor__Fii(int x, int y)", "args": [{"name": "qcol", "type": "int"}, {"name": "qrow", "type": "int"}], "returns": {"type": "void"}}, "drlg_l1_init_shadows": {"address": ["0x40B699"], "psx_ref": ["0x8013C190"], "explanation": "drlg_l1_init_shadows initializes arch and bar shadows.\nPSX sig: void DRLG_L1Shadows__Fv()", "args": [], "returns": {"type": "void"}}, "drlg_l1_place_miniset": {"address": ["0x40B881"], "psx_ref": ["0x8013C5A0"], "explanation": "drlg_l1_place_miniset places the given miniset of tile IDs.\nPSX sig: int DRLG_PlaceMiniSet__FPCUciiiiiii(unsigned char *miniset, int tmin, int tmax, int cx, int cy, int setview, int noquad, int ldir)", "args": [{"name": "miniset", "type": "uint8_t *"}, {"name": "tmin", "type": "int"}, {"name": "tmax", "type": "int"}, {"name": "cx", "type": "int"}, {"name": "cy", "type": "int"}, {"name": "set_view", "type": "bool32_t"}, {"name": "noquad", "type": "int"}, {"name": "ldir", "type": "int"}], "returns": {"type": "int"}}, "drlg_l1_reset": {"address": ["0x40BAF6"], "psx_ref": ["0x8013D2F8"], "psx_def": ["void InitL5Dungeon__Fv()"], "explanation": "drlg_l1_reset resets the tile ID and the dungeon flag maps.", "args": [], "returns": {"type": "void"}}, "drlg_l1_clear_flags": {"address": ["0x40BB18"], "psx_ref": ["0x8013D37C"], "psx_def": ["void L5ClearFlags__Fv()"], "explanation": "drlg_l1_clear_flags clears the dungeon generation flags 0x40.", "args": [], "returns": {"type": "void"}}, "drlg_l1_generate_first_room": {"address": ["0x40BB33"], "psx_ref": ["0x8013D7FC"], "psx_def": ["void L5firstRoom__Fv()"], "explanation": "drlg_l1_generate_first_room generates the first room of the dungeon.", "args": [], "returns": {"type": "void"}}, "drlg_l1_add_room": {"address": ["0x40BD66"], "psx_ref": ["0x8013D3CC"], "explanation": "drlg_l1_add_room adds walls for a room at the given area.\nPSX sig: void L5drawRoom__Fiiii(int x, int y, int w, int h)", "args": [{"name": "qcol_start", "type": "int"}, {"name": "qrow_start", "type": "int"}, {"name": "qcol_count", "type": "int"}, {"name": "qrow_count", "type": "int"}], "returns": {"type": "void"}}, "drlg_l1_generate_room": {"address": ["0x40BD9D"], "psx_ref": ["0x8013D4CC"], "explanation": "drlg_l1_generate_room generates a room of the given dimensions at the\nspecified coordinates.\nPSX sig: void L5roomGen__Fiiiii(int x, int y, int w, int h, int dir)", "args": [{"name": "qcol_start", "type": "int"}, {"name": "qrow_start", "type": "int"}, {"name": "qcol_count", "type": "int"}, {"name": "qrow_count", "type": "int"}, {"name": "dir_horiz", "type": "bool32_t"}], "returns": {"type": "void"}}, "drlg_l1_is_area_empty": {"address": ["0x40BFA4"], "psx_ref": ["0x8013D438"], "explanation": "drlg_l1_is_area_empty reports whether the given area is empty.\nPSX sig: unsigned char L5checkRoom__Fiiii(int x, int y, int width, int height)", "args": [{"name": "qcol_start", "type": "int"}, {"name": "qrow_start", "type": "int"}, {"name": "qcol_count", "type": "int"}, {"name": "qrow_count", "type": "int"}], "returns": {"type": "bool32_t"}}, "drlg_l1_get_area": {"address": ["0x40C008"], "psx_ref": ["0x8013DB9C"], "explanation": "drlg_l1_get_area returns the number of walls on the map.\nPSX sig: long L5GetArea__Fv()", "args": [], "returns": {"type": "int"}}, "drlg_l1_init_tile_bit_map": {"address": ["0x40C02A"], "psx_ref": ["0x8013DBFC"], "psx_def": ["void L5makeDungeon__Fv()"], "explanation": "drlg_l1_init_tile_bit_map initializes a tile ID map of twice the size,\nrepeating each tile in blocks of 4.", "args": [], "returns": {"type": "void"}}, "drlg_l1_generate_pattern": {"address": ["0x40C06E"], "psx_ref": ["0x8013DC88"], "psx_def": ["void L5makeDmt__Fv()"], "explanation": "drlg_l1_generate_pattern replaces tile ID patterns based on a lookup table.", "args": [], "returns": {"type": "void"}}, "drlg_l1_add_wall": {"address": ["0x40C0E0"], "psx_ref": ["0x8013E458"], "psx_def": ["void L5AddWall__Fv()"], "explanation": "drlg_l1_add_wall adds wall, arch or bar tile IDs.", "args": [], "returns": {"type": "void"}}, "drlg_l1_get_horiz_wall_space": {"address": ["0x40C23C"], "psx_ref": ["0x8013DD70"], "explanation": "drlg_l1_get_horiz_wall_space returns the number of horizontal wall tiles\nthat fit at the given coordinate.\nPSX sig: int L5HWallOk__Fii(int i, int j)", "args": [{"name": "qcol", "type": "int"}, {"name": "qrow", "type": "int"}], "returns": {"type": "int"}}, "drlg_l1_get_vert_wall_space": {"address": ["0x40C2DC"], "psx_ref": ["0x8013DEAC"], "explanation": "drlg_l1_get_vert_wall_space returns the number of vertical wall tiles that\nfit at the given coordinate.\nPSX sig: int L5VWallOk__Fii(int i, int j)", "args": [{"name": "qcol", "type": "int"}, {"name": "qrow", "type": "int"}], "returns": {"type": "int"}}, "drlg_l1_add_horiz_wall": {"address": ["0x40C35B"], "psx_ref": ["0x8013DFF4"], "explanation": "drlg_l1_add_horiz_wall adds a horizontal wall based on the given tile ID.\nPSX sig: void L5HorizWall__Fiici(int i, int j, char p, int dx)", "args": [{"name": "qcol", "type": "int"}, {"name": "qrow", "type": "int"}, {"name": "tile_id", "type": "l1_tile_id"}, {"name": "qcol_count", "type": "int"}], "returns": {"type": "void"}}, "drlg_l1_add_vert_wall": {"address": ["0x40C449"], "psx_ref": ["0x8013E22C"], "explanation": "drlg_l1_add_vert_wall adds a vertical wall based on the given tile ID.\nPSX sig: void L5VertWall__Fiici(int i, int j, char p, int dy)", "args": [{"name": "qcol", "type": "int"}, {"name": "qrow", "type": "int"}, {"name": "tile_id", "type": "l1_tile_id"}, {"name": "qrow_count", "type": "int"}], "returns": {"type": "void"}}, "drlg_l1_fix_tiles": {"address": ["0x40C551"], "psx_ref": ["0x8013EA28"], "psx_def": ["void L5tileFix__Fv()"], "explanation": "drlg_l1_fix_tiles fixes tile IDs of wall edges.", "args": [], "returns": {"type": "void"}}, "drlg_l1_decorate": {"address": ["0x40C8C0"], "psx_ref": ["0x8013F2EC"], "psx_def": ["void DRLG_L5Subs__Fv()"], "explanation": "drlg_l1_decorate decorates the dungeon with tapestry tile IDs.", "args": [], "returns": {"type": "void"}}, "drlg_l1_generate_chambers": {"address": ["0x40C99D"], "psx_ref": ["0x8013F5F8"], "psx_def": ["void L5FillChambers__Fv()"], "explanation": "drlg_l1_generate_chamber generates chambers.", "args": [], "returns": {"type": "void"}}, "drlg_l1_generate_chamber": {"address": ["0x40CD86"], "psx_ref": ["0x8013E6B4"], "explanation": "drlg_l1_generate_chamber generates a chamber at the given coordiates with\ncolumns on the specified sides.\nPSX sig: void DRLG_L5GChamber__Fiiiiii(int sx, int sy, int topflag, int bottomflag, int leftflag, int rightflag)", "args": [{"name": "qcol_start", "type": "int"}, {"name": "qrow_start", "type": "int"}, {"name": "top_right", "type": "bool32_t"}, {"name": "bottom_left", "type": "bool32_t"}, {"name": "top_left", "type": "bool32_t"}, {"name": "bottom_right", "type": "bool32_t"}], "returns": {"type": "void"}}, "drlg_l1_generate_hall": {"address": ["0x40CEC7"], "psx_ref": ["0x8013E974"], "explanation": "drlg_l1_generate_hall generates a hall of columns and arches.\nPSX sig: void DRLG_L5GHall__Fiiii(int x1, int y1, int x2, int y2)", "args": [{"name": "qcol_start", "type": "int"}, {"name": "qrow_start", "type": "int"}, {"name": "qcol_end", "type": "int"}, {"name": "qrow_end", "type": "int"}], "returns": {"type": "void"}}, "drlg_l1_init_quest_dun": {"address": ["0x40CF17"], "psx_ref": ["0x8013F4F8"], "explanation": "drlg_l1_init_quest_dun initializes tile IDs based on the loaded quest\ndungeon file.\nPSX sig: void DRLG_L5SetRoom__Fii(int rx1, int ry1)", "args": [{"name": "qcol_start", "type": "int"}, {"name": "qrow_start", "type": "int"}], "returns": {"type": "void"}}, "drlg_l1_floor_transparency": {"address": ["0x40CF9C"], "psx_ref": ["0x8014016C"], "psx_def": ["void DRLG_L5FloodTVal__Fv()"], "explanation": "drlg_l1_floor_transparency adds transparency to concealing walls.", "args": [], "returns": {"type": "void"}}, "drlg_l1_floor_transparency_recursive": {"address": ["0x40D00B"], "psx_ref": ["0x8013FCE4"], "explanation": "drlg_l1_floor_transparency_recursive recursively adds transparency to\nconcealing walls.\nPSX sig: void DRLG_L5FTVR__Fiiiii(int i, int j, int x, int y, int d)", "args": [{"name": "qcol", "type": "int"}, {"name": "qrow", "type": "int"}, {"name": "col", "type": "int"}, {"name": "row", "type": "int"}, {"name": "direction", "type": "int"}], "returns": {"type": "void"}}, "drlg_l1_fix_transparency": {"address": ["0x40D1FB"], "psx_ref": ["0x80140264"], "psx_def": ["void DRLG_L5TransFix__Fv()"], "explanation": "drlg_l1_fix_transparency fixes transparency close to dirt tile IDs after\ndungeon generation.", "args": [], "returns": {"type": "void"}}, "drlg_l1_fix_dirt": {"address": ["0x40D283"], "psx_ref": ["0x801406A8"], "explanation": "drlg_l1_fix_dirt fixes dirt tile IDs after dungeon generation.\nPSX sig: void DRLG_L5DirtFix__Fv()", "args": [], "returns": {"type": "void"}}, "drlg_l1_fix_corners": {"address": ["0x40D2EF"], "psx_ref": ["0x80140824"], "psx_def": ["void DRLG_L5CornerFix__Fv()"], "explanation": "drlg_l1_fix_corners fixes corner and arch tile IDs after dungeon generation.", "args": [], "returns": {"type": "void"}}, "drlg_l2_fix_lockout": {"address": ["0x40D379"], "psx_ref": ["0x801470F4"], "psx_def": ["void L2LockoutFix__Fv()"], "explanation": "drlg_l2_fix_lockout fixes any unreachable areas.", "args": [], "returns": {"type": "void"}}, "drlg_l2_fix_doors": {"address": ["0x40D4CC"], "psx_ref": ["0x80147478"], "psx_def": ["void L2DoorFix__Fv()"], "explanation": "drlg_l2_fix_doors fixes door tile IDs after dungeon generation.", "args": [], "returns": {"type": "void"}}, "drlg_l2_init_piece_id_map": {"address": ["0x40D6C1"], "psx_ref": ["0x801465F0"], "psx_def": ["void DRLG_L2Pass3__Fv()"], "explanation": "drlg_l2_init_piece_id_map initializes the dungeon piece ID map.", "args": [], "returns": {"type": "void"}}, "drlg_l2_create_dungeon": {"address": ["0x40D888"], "psx_ref": ["0x8014854C"], "psx_def": ["void CreateL2Dungeon__FUii(unsigned int rseed, int entry)"], "explanation": "drlg_l2_create_dungeon creates a random catacombs dungeon based on the given\nseed and level entry.", "args": [{"name": "seed", "type": "uint32_t"}, {"name": "entry", "type": "int"}], "returns": {"type": "void"}}, "drlg_l2_load_single_player_quest_dun": {"address": ["0x40D94F"], "psx_ref": ["0x80143E8C"], "psx_def": ["void DRLG_LoadL2SP__Fv()"], "explanation": "drlg_l2_load_single_player_quest_dun loads tile IDs from the dungeon file of\nthe active single player quest level.", "args": [], "returns": {"type": "void"}}, "drlg_l2_free_single_player_quest_dun": {"address": ["0x40D9A4"], "psx_ref": ["0x80143F2C"], "psx_def": ["void DRLG_FreeL2SP__Fv()"], "explanation": "drlg_l2_free_single_player_quest_dun frees the dungeon file of the active\nquest level.", "args": [], "returns": {"type": "void"}}, "drlg_l2_generate_dungeon": {"address": ["0x40D9B6"], "psx_ref": ["0x801476E0"], "psx_def": ["void DRLG_L2__Fi(int entry)"], "explanation": "drlg_l2_generate_dungeon generates a cathedral dungeon based on the given\nlevel entry.", "args": [{"name": "entry", "type": "int"}], "returns": {"type": "void"}}, "drlg_l2_place_miniset": {"address": ["0x40E074"], "psx_ref": ["0x80143408"], "psx_def": ["unsigned char DRLG_L2PlaceMiniSet__FPUciiiiii(unsigned char *miniset, int tmin, int tmax, int cx, int cy, int setview, int ldir)"], "explanation": "drlg_l2_place_miniset places the given miniset of tile IDs.", "args": [{"name": "miniset", "type": "uint8_t *"}, {"name": "tmin", "type": "int"}, {"name": "tmax", "type": "int"}, {"name": "cx", "type": "int"}, {"name": "cy", "type": "int"}, {"name": "set_view", "type": "bool32_t"}, {"name": "ldir", "type": "int"}], "returns": {"type": "bool32_t"}}, "drlg_l2_place_rand_miniset": {"address": ["0x40E2D1"], "psx_ref": ["0x80143798"], "psx_def": ["void DRLG_L2PlaceRndSet__FPUci(unsigned char *miniset, int rndper)"], "explanation": "drlg_l2_place_rand_miniset places the given miniset of tile IDs with a\ncertain probability.", "args": [{"name": "miniset", "type": "uint8_t *"}, {"name": "probability", "type": "int"}], "returns": {"type": "void"}}, "drlg_l2_decorate": {"address": ["0x40E49C"], "psx_ref": ["0x80143A90"], "psx_def": ["void DRLG_L2Subs__Fv()"], "explanation": "drlg_l2_decorate decorates the dungeon.", "args": [], "returns": {"type": "void"}}, "drlg_l2_init_shadows": {"address": ["0x40E59C"], "psx_ref": ["0x80143C80"], "psx_def": ["void DRLG_L2Shadows__Fv()"], "explanation": "drlg_l2_init_shadows initializes arch and bar shadows.", "args": [], "returns": {"type": "void"}}, "drlg_l2_init_quest_dun": {"address": ["0x40E66B"], "psx_ref": ["0x80143F5C"], "psx_def": ["void DRLG_L2SetRoom__Fii(int rx1, int ry1)"], "explanation": "drlg_l2_init_quest_dun initializes tile IDs based on the loaded quest dungeon\nfile.", "args": [{"name": "tx", "type": "int"}, {"name": "ty", "type": "int"}], "returns": {"type": "void"}}, "drlg_l2_fix_tiles": {"address": ["0x40E6F0"], "psx_ref": ["0x80145494"], "psx_def": ["void L2TileFix__Fv()"], "explanation": "drlg_l2_fix_tiles fixes tile IDs of wall edges.", "args": [], "returns": {"type": "void"}}, "drlg_l2_gen_dungeon": {"address": ["0x40E74F"], "psx_ref": ["0x801462E4"], "psx_def": ["unsigned char CreateDungeon__Fv()"], "explanation": "drlg_l2_gen_dungeon tries to generate a cathedral dungeon.", "args": [], "returns": {"type": "bool32_t"}}, "drlg_l2_floor_transparency": {"address": ["0x40FB6C"], "psx_ref": ["0x80146C70"], "psx_def": ["void DRLG_L2FloodTVal__Fv()"], "explanation": "drlg_l2_floor_transparency adds transparency to concealing walls.", "args": [], "returns": {"type": "void"}}, "drlg_l2_fix_transparency": {"address": ["0x40FDCB"], "psx_ref": ["0x80146D68"], "psx_def": ["void DRLG_L2TransFix__Fv()"], "explanation": "drlg_l2_fix_transparency fixes transparency close to dirt tile IDs after\ndungeon generation.", "args": [], "returns": {"type": "void"}}, "drlg_l2_fix_dirt": {"address": ["0x40FE53"], "psx_ref": ["0x80146F94"], "psx_def": ["void L2DirtFix__Fv()"], "explanation": "drlg_l2_fix_dirt fixes dirt tile IDs after dungeon generation.", "args": [], "returns": {"type": "void"}}, "drlg_l2_init_arches": {"address": ["0x40FEBF"], "psx_ref": ["0x80148134"], "psx_def": ["void DRLG_InitL2Vals__Fv()"], "explanation": "drlg_l2_init_arches initializes arches.", "args": [], "returns": {"type": "void"}}, "drlg_l3_create_dungeon": {"address": ["0x4103A1"], "psx_ref": ["0x8014D450"], "psx_def": ["void CreateL3Dungeon__FUii(unsigned int rseed, int entry)"], "explanation": "drlg_l3_create_dungeon creates a random caves dungeon based on the given seed\nand level entry.", "args": [{"name": "seed", "type": "uint32_t"}, {"name": "entry", "type": "int"}], "returns": {"type": "void"}}, "drlg_l3_place_miniset": {"address": ["0x411A74"], "psx_ref": ["0x8014B0C4"], "psx_def": ["int DRLG_L3PlaceMiniSet__FPCUciiiiii(unsigned char *miniset, int tmin, int tmax, int cx, int cy, int setview, int ldir)"], "explanation": "drlg_l3_place_miniset places the given miniset of tile IDs.", "args": [{"name": "miniset", "type": "char *"}, {"name": "tmin", "type": "int"}, {"name": "tmax", "type": "int"}, {"name": "cx", "type": "int"}, {"name": "cy", "type": "int"}, {"name": "set_view", "type": "bool32_t"}, {"name": "ldir", "type": "int"}], "returns": {"type": "bool32_t"}}, "drlg_l4_create_dungeon": {"address": ["0x4129B0"], "psx_ref": ["0x801551F8"], "psx_def": ["void CreateL4Dungeon__FUii(unsigned int rseed, int entry)"], "explanation": "drlg_l4_create_dungeon creates a random hell dungeon based on the given seed\nand level entry.", "args": [{"name": "seed", "type": "uint32_t"}, {"name": "entry", "type": "int"}], "returns": {"type": "void"}}, "j_dthread_cpp_init_1": {"address": ["0x415098"], "explanation": "j_dthread_cpp_init_1 initializes the C++ runtime of dthread.cpp.", "args": [], "returns": {"type": "void"}}, "dthread_cpp_init_1": {"address": ["0x41509D"], "explanation": "dthread_cpp_init_1 initializes the C++ runtime of dthread.cpp.", "args": [], "returns": {"type": "void"}}, "dthread_cpp_init_2": {"address": ["0x4150A8"], "explanation": "dthread_cpp_init_2 initializes the C++ runtime of dthread.cpp.", "args": [], "returns": {"type": "void"}}, "dthread_cleanup": {"address": ["0x4152C0"], "explanation": "dthread_cleanup terminates the delta thread.", "args": [], "returns": {"type": "void"}}, "j_dx_cpp_init_1": {"address": ["0x415362"], "explanation": "j_dx_cpp_init_1 initializes the C++ runtime of dx.cpp.", "args": [], "returns": {"type": "void"}}, "dx_cpp_init_1": {"address": ["0x415367"], "explanation": "dx_cpp_init_1 initializes the C++ runtime of dx.cpp.", "args": [], "returns": {"type": "void"}}, "dx_cpp_init_2": {"address": ["0x415372"], "explanation": "dx_cpp_init_2 initializes the C++ runtime of dx.cpp.", "args": [], "returns": {"type": "void"}}, "dx_create_primary_surface": {"address": ["0x4155C2"], "explanation": "dx_create_primary_surface creates the primary DirectDraw surface.", "args": [], "returns": {"type": "void"}}, "dx_cleanup": {"address": ["0x4157A0"], "explanation": "dx_cleanup terminates the DirectX rendering system.", "args": [], "returns": {"type": "void"}}, "j_effects_cpp_init": {"address": ["0x4158A9"], "explanation": "j_effects_cpp_init initializes the C++ runtime of effects.cpp.", "args": [], "returns": {"type": "void"}}, "effects_cpp_init": {"address": ["0x4158AE"], "explanation": "effects_cpp_init initializes the C++ runtime of effects.cpp.", "args": [], "returns": {"type": "void"}}, "effects_cleanup_sfx": {"address": ["0x415DFF"], "explanation": "effects_cleanup_sfx terminates and releases sound effects.", "args": [], "returns": {"type": "void"}}, "encrypt_hash": {"address": ["0x415FDF"], "explanation": "encrypt_hash returns the hash of the given string.", "args": [{"name": "s", "type": "char *"}, {"name": "type", "type": "int"}], "returns": {"type": "uint32_t"}}, "encrypt_init_lookup_table": {"address": ["0x41602E"], "explanation": "encrypt_init_lookup_table initializes the lookup table used for hashing with\npseudo-random numbers based on an LCG with a=125, c=3 and m=0x2AAAAB.\nReferences:\n* https:///en.wikipedia.org/wiki/Linear_congruential_generator", "args": [], "returns": {"type": "void"}}, "j_engine_cpp_init_1": {"address": ["0x4161FC"], "explanation": "j_engine_cpp_init_1 initializes the C++ runtime of engine.cpp.", "args": [], "returns": {"type": "void"}}, "engine_cpp_init_1": {"address": ["0x416201"], "explanation": "engine_cpp_init_1 initializes the C++ runtime of engine.cpp.", "args": [], "returns": {"type": "void"}}, "engine_cel_decode_frame_content_into_buf": {"address": ["0x41620C"], "explanation": "engine_cel_decode_frame_content_into_buf decodes the given CEL frame into the\nspecified destination buffer.", "args": [{"name": "dst_buf", "type": "uint8_t *"}, {"name": "frame_content", "type": "uint8_t *"}, {"name": "frame_content_size", "type": "int"}, {"name": "frame_width", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame": {"address": ["0x416274"], "explanation": "engine_cel_decode_frame decodes the given CEL frame to the specified screen\ncoordinate.\nx = screen_x - 64\ny = screen_y - 160\nframeNum = frame - 1\nNote, the coordinates specify the bottom left corner (verified in game).\nNote, this function is only used to decode CEL images without frame headers.", "args": [{"name": "screen_x", "type": "int"}, {"name": "screen_y", "type": "int"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_into_buf": {"address": ["0x4162B8"], "explanation": "engine_cel_decode_frame_into_buf decodes the given CEL frame into the\nspecified buffer.\nNote, this function is only used to decode CEL images without frame headers\n(pentspn2.cel).", "args": [{"name": "dst_buf", "type": "uint8_t *"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_header": {"address": ["0x4162DE"], "explanation": "engine_cel_decode_frame_with_header decodes the given CEL frame to the\nspecified screen coordinate.\nx = screen_x - 64\ny = screen_y - 160\nframeNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(objects, item drops, objcurs.cel, towners).", "args": [{"name": "screen_x", "type": "int"}, {"name": "screen_y", "type": "int"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "always_0", "type": "int"}, {"name": "direction", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_header_into_buf": {"address": ["0x416359"], "explanation": "engine_cel_decode_frame_with_header_into_buf decodes the given CEL frame into\nthe specified buffer.\nNote, this function is only used to decode CEL images with frame headers\n(square.cel).", "args": [{"name": "dst_buf", "type": "uint8_t *"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "always_0", "type": "int"}, {"name": "direction", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_content_with_light_into_buf": {"address": ["0x4163AC"], "explanation": "engine_cel_decode_frame_content_with_light_into_buf decodes the given CEL\nframe into the specified destination buffer with added lighting.", "args": [{"name": "dst_buf", "type": "uint8_t *"}, {"name": "frame_content", "type": "uint8_t *"}, {"name": "frame_content_size", "type": "int"}, {"name": "frame_width", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_content_with_light_and_transparency_into_buf": {"address": ["0x416488"], "explanation": "engine_cel_decode_frame_content_with_light_and_transparency_into_buf decodes\nthe given CEL frame into the specified destination buffer with added lighting\nand transparency.", "args": [{"name": "dst_buf", "type": "uint8_t *"}, {"name": "frame_content", "type": "uint8_t *"}, {"name": "frame_content_size", "type": "int"}, {"name": "frame_width", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_light": {"address": ["0x416565"], "explanation": "engine_cel_decode_frame_with_light decodes the given CEL frame to the\nspecified screen coordinate, adding lighting if applicable.\nx = screen_x - 64\ny = screen_y - 160\nframeNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images without frame headers\n(bigtgold.cel).", "args": [{"name": "screen_x", "type": "int"}, {"name": "screen_y", "type": "int"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_header_and_light": {"address": ["0x4165BD"], "explanation": "engine_cel_decode_frame_with_header_and_light decodes the given CEL frame to\nthe specified screen coordinate, adding lighting if applicable.\nx = screen_x - 64\ny = screen_y - 160\nframeNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(item drops, objects).", "args": [{"name": "screen_x", "type": "int"}, {"name": "screen_y", "type": "int"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "always_0", "type": "int"}, {"name": "direction", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_header_light_and_transparency_into_buf": {"address": ["0x41664B"], "explanation": "engine_cel_decode_frame_with_header_light_and_transparency_into_buf decodes\nthe given CEL frame into the specified buffer with added lighting and\ntransparency.\nNote, this function is only used to decode CEL images with frame headers\n(objcurs.cel, level special).", "args": [{"name": "dst_buf", "type": "uint8_t *"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "always_0", "type": "int"}, {"name": "direction", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_header_and_light_not_equipable": {"address": ["0x4166BF"], "explanation": "engine_cel_decode_frame_with_header_and_light_not_equipable decodes the given\nCEL frame to the specified screen coordinate with added lighting.\nx = screen_x - 64\ny = screen_y - 160\nframeNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(objcurs.cel).", "args": [{"name": "screen_x", "type": "int"}, {"name": "screen_y", "type": "int"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "always_0", "type": "int"}, {"name": "direction", "type": "int"}, {"name": "always_1", "type": "int8_t"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_content_into_buf2": {"address": ["0x4167DB"], "explanation": "engine_cel_decode_frame_content_into_buf2 decodes the given CEL frame into\nthe specified destination buffer.", "args": [{"name": "dst_buf", "type": "uint8_t *"}, {"name": "frame_content", "type": "uint8_t *"}, {"name": "frame_content_size", "type": "int"}, {"name": "frame_width", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_header2": {"address": ["0x41685A"], "explanation": "engine_cel_decode_frame_with_header2 decodes the given CEL frame to the\nspecified screen coordinate.\nx = screen_x - 64\ny = screen_y - 160\nframeNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(objects, objcurs.cel, item drops, towners).\nNote, D1DrawCursorTown (from RE Notes)", "args": [{"name": "screen_x", "type": "int"}, {"name": "screen_y", "type": "int"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "a6", "type": "int"}, {"name": "direction", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_header_into_buf2": {"address": ["0x4168D5"], "explanation": "engine_cel_decode_frame_with_header_into_buf decodes the given CEL frame into\nthe specified buffer.\nNote, this function is only used to decode CEL images with frame headers\n(square.cel).", "args": [{"name": "dst_buf", "type": "uint8_t *"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "a5", "type": "int"}, {"name": "direction", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_content_with_light_into_buf2": {"address": ["0x41692A"], "explanation": "engine_cel_decode_frame_content_with_light_into_buf2 decodes the given CEL\nframe into the specified destination buffer with added lighting.", "args": [{"name": "dst_buf", "type": "uint8_t *"}, {"name": "frame_content", "type": "uint8_t *"}, {"name": "frame_content_size", "type": "int"}, {"name": "frame_width", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_content_with_light_and_transparency_into_buf2": {"address": ["0x416A21"], "explanation": "engine_cel_decode_frame_content_with_light_and_transparency_into_buf2 decodes\nthe given CEL frame into the specified destination buffer with added lighting\nand transparency.", "args": [{"name": "dst_buf", "type": "uint8_t *"}, {"name": "frame_content", "type": "uint8_t *"}, {"name": "frame_content_size", "type": "int"}, {"name": "frame_width", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_header_and_light2": {"address": ["0x416B19"], "explanation": "engine_cel_decode_frame_with_header_and_light2 decodes the given CEL frame to\nthe specified screen coordinate, adding lighting if applicable.\nx = screen_x - 64\ny = screen_y - 160\nframeNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(item drops, objects).\nNote, D1DrawObjectBaseDungeon (from RE Notes).", "args": [{"name": "screen_x", "type": "int"}, {"name": "screen_y", "type": "int"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "a6", "type": "int"}, {"name": "direction", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_header_light_and_transparency_into_buf2": {"address": ["0x416BA9"], "explanation": "engine_cel_decode_frame_with_header_light_and_transparency_into_buf2 decodes\nthe given CEL frame into the specified buffer with added lighting and\ntransparency.\nNote, this function is only used to decode CEL images with frame headers\n(level special).\nNote, D1DrawArchTile (from RE Notes).", "args": [{"name": "dst_buf", "type": "uint8_t *"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "a5", "type": "int"}, {"name": "direction", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_header_and_light_not_equipable2": {"address": ["0x416C1B"], "explanation": "engine_cel_decode_frame_with_header_and_light_not_equipable2 decodes the\ngiven CEL frame to the specified screen coordinate with added lighting.\nx = screen_x - 64\ny = screen_y - 160\nframeNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers (objcurs.cel).", "args": [{"name": "screen_x", "type": "int"}, {"name": "screen_y", "type": "int"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "always_0", "type": "int"}, {"name": "direction", "type": "int"}, {"name": "always_1", "type": "int8_t"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_into_rect_of_buf": {"address": ["0x416D3C"], "explanation": "engine_cel_decode_frame_into_rect_of_buf decodes the given CEL frame into a\nrectangle of the specified buffer.\nNote, this function is only used to decode CEL images without frame headers\n(control panel and orbs).", "args": [{"name": "dst_buf", "type": "uint8_t *"}, {"name": "always_0", "type": "int"}, {"name": "dst_height", "type": "int"}, {"name": "dst_width", "type": "int"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_colour": {"address": ["0x416DC6"], "explanation": "engine_cel_decode_frame_with_header_and_colour decodes the given CEL frame to\nthe specified screen coordinate and with the specified colour.\nx = screen_x - 64\ny = screen_y - 160\nframeNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(objcurs.cel, item drops, objects, towners).", "args": [{"name": "colour", "type": "uint8_t"}, {"name": "screen_x", "type": "int"}, {"name": "screen_y", "type": "int"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "a7", "type": "int"}, {"name": "direction", "type": "int"}], "returns": {"type": "void"}}, "engine_cel_decode_frame_with_header_and_colour_highlight": {"address": ["0x416EC0"], "explanation": "engine_cel_decode_frame_with_header_and_colour_hilight decodes the given CEL\nframe to the specified screen coordinate with added colour highlight.\nx = screen_x - 64\ny = screen_y - 160\nframeNum = frame - 1\nNote, the coordinates specify the bottom left corner.\nNote, this function is only used to decode CEL images with frame headers\n(objcurs.cel, item drops, objects, towners).\nNOTE: D1DrawObjectHilight (from RE Notes).", "args": [{"name": "colour", "type": "uint8_t"}, {"name": "screen_x", "type": "int"}, {"name": "screen_y", "type": "int"}, {"name": "cel_buf", "type": "uint8_t *"}, {"name": "frame", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "a7", "type": "int"}, {"name": "direction", "type": "int"}], "returns": {"type": "void"}}, "engine_set_seed": {"address": ["0x417518"], "psx_ref": ["0x8003DACC"], "psx_def": ["void SetRndSeed__Fl(long s)"], "explanation": "engine_set_seed sets the global seed to s.\nReferences:\n* https:///github.com/sanctuary/notes/blob/master/bss/engine.cpp#seed", "args": [{"name": "s", "type": "int32_t"}], "returns": {"type": "void"}}, "engine_rand": {"address": ["0x41752C"], "psx_ref": ["0x8003DADC"], "psx_def": ["long GetRndSeed__Fv()"], "explanation": "engine_rand returns a non-negative pseudo-random integer in [0, 2^31), using\nthe Borland C/C++ pseudo-random number generator algorithm with a multiplier\nof 0x15A4E35 and an increment of 1.\nReferences:\n* https:///en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use", "args": [], "returns": {"type": "int32_t"}}, "engine_rand_cap": {"address": ["0x41754B"], "psx_ref": ["0x8003DB24"], "psx_def": ["long ENG_random__Fl(long v)"], "explanation": "engine_rand_cap returns a capped non-negative pseudo-random integer in\n[0, max), using the Borland C/C++ pseudo-random number generator algorithm\nwith a multiplier of 0x15A4E35 and an increment of 1.\nReferences:\n* https:///en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use", "args": [{"name": "unused", "type": "int"}, {"name": "max", "type": "int32_t"}], "returns": {"type": "int32_t"}}, "engine_cpp_init_2": {"address": ["0x41756D"], "explanation": "engine_cpp_init_2 initializes the C++ runtime of engine.cpp.", "args": [], "returns": {"type": "void"}}, "engine_init_mem_mutex": {"address": ["0x417577"], "explanation": "engine_init_mem_mutex initializes the memory mutex.", "args": [], "returns": {"type": "void"}}, "engine_cleanup_mem_mutex_atexit": {"address": ["0x417583"], "explanation": "engine_cleanup_mem_mutex_atexit terminates the memory mutex at exit.", "args": [], "returns": {"type": "void"}}, "engine_cleanup_mem_mutex": {"address": ["0x41758F"], "explanation": "engine_cleanup_mem_mutex terminates the memory mutex.", "args": [], "returns": {"type": "void"}}, "engine_mem_alloc": {"address": ["0x41759B"], "explanation": "engine_mem_alloc allocates a memory space of the given size.", "args": [{"name": "size", "type": "int"}], "returns": {"type": "void *"}}, "engine_mem_free": {"address": ["0x4175E8"], "explanation": "engine_mem_free frees the given memory space.", "args": [{"name": "ptr", "type": "void *"}], "returns": {"type": "void"}}, "engine_mem_load_file": {"address": ["0x417618"], "psx_ref": ["0x80074E9C"], "psx_def": ["unsigned char* GRL_LoadFileInMemSig__FPCcPUl(char *Name, unsigned long *Len)"], "explanation": "engine_mem_load_file returns the contents of the given file.", "args": [{"name": "file_path", "type": "char *"}, {"name": "size", "type": "int *"}], "returns": {"type": "void *"}}, "engine_mem_load_file_with": {"address": ["0x417673"], "explanation": "engine_mem_load_file_with loads the given file into the provided memory\nbuffer.", "args": [{"name": "path", "type": "char *"}, {"name": "buf", "type": "void *"}], "returns": {"type": "void"}}, "error_draw": {"address": ["0x4180AA"], "explanation": "error_draw renders the error dialogue on screen.", "args": [], "returns": {"type": "void"}}, "exception_cpp_init": {"address": ["0x4182AD"], "explanation": "exception_cpp_init initializes the C++ runtime of exception.cpp.", "args": [], "returns": {"type": "void"}}, "gendung_init_transparency": {"address": ["0x41944A"], "psx_ref": ["0x8015A070"], "psx_def": ["void DRLG_InitTrans__Fv()"], "explanation": "gendung_init_transparency initializes transparency.", "args": [], "returns": {"type": "void"}}, "gendung_make_rect_transparent": {"address": ["0x419477"], "psx_ref": ["0x800578DC"], "psx_def": ["void DRLG_MRectTrans__Fiiii(int x1, int y1, int x2, int y2)"], "explanation": "gendung_make_rect_transparent makes the given rectangle transparent.", "args": [{"name": "qcol_start", "type": "int"}, {"name": "qrow_start", "type": "int"}, {"name": "qcol_end", "type": "int"}, {"name": "qrow_end", "type": "int"}], "returns": {"type": "void"}}, "gendung_rect_transparent": {"address": ["0x4194D0"], "psx_ref": ["0x8015A0E4"], "psx_def": ["void DRLG_RectTrans__Fiiii(int x1, int y1, int x2, int y2)"], "explanation": "gendung_rect_transparent makes the given rectangle transparent.", "args": [{"name": "x_start", "type": "int"}, {"name": "y_start", "type": "int"}, {"name": "x_end", "type": "int"}, {"name": "y_end", "type": "int"}], "returns": {"type": "void"}}, "gendung_copy_transparency": {"address": ["0x419515"], "psx_ref": ["0x8015A158"], "psx_def": ["void DRLG_CopyTrans__Fiiii(int sx, int sy, int dx, int dy)"], "explanation": "gendung_copy_transparency copies transparency from the source to the\ndestination coordinate.", "args": [{"name": "src_col", "type": "int"}, {"name": "src_row", "type": "int"}, {"name": "dst_col", "type": "int"}, {"name": "dst_row", "type": "int"}], "returns": {"type": "void"}}, "gendung_init_set_piece": {"address": ["0x4195A2"], "psx_ref": ["0x8015A2A4"], "psx_def": ["void DRLG_InitSetPC__Fv()"], "explanation": "gendung_init_set_piece initializes the placement variables of the set piece\n(quest dungeon).", "args": [], "returns": {"type": "void"}}, "gendung_mark_set_piece": {"address": ["0x4195B9"], "psx_ref": ["0x8015A2BC"], "psx_def": ["void DRLG_SetPC__Fv()"], "explanation": "gendung_mark_set_piece marks the area of the set piece (quest dungeon).", "args": [], "returns": {"type": "void"}}, "gendung_place_theme_rooms": {"address": ["0x419C10"], "psx_ref": ["0x8015B6B8"], "psx_def": ["void DRLG_PlaceThemeRooms__FiiiiUc(int minSize, int maxSize, int floor, int freq, int rndSize)"], "explanation": "gendung_place_theme_rooms places thematic rooms.", "args": [{"name": "min_size", "type": "int"}, {"name": "max_size", "type": "int"}, {"name": "floor", "type": "int"}, {"name": "frequency", "type": "int"}, {"name": "rnd_size", "type": "int"}], "returns": {"type": "void"}}, "gendung_init_levels": {"address": ["0x419E71"], "psx_ref": ["0x8015BBC8"], "psx_def": ["void InitLevels__Fv()"], "explanation": "gendung_init_levels initializes the dungeon levels game state.", "args": [], "returns": {"type": "void"}}, "gmenu_draw_pause": {"address": ["0x419E8B"], "explanation": "gmenu_draw_pause renders the pause menu on screen.", "args": [], "returns": {"type": "void"}}, "gmenu_draw": {"address": ["0x41A0B6"], "explanation": "gmenu_draw renders the game menu on screen.", "args": [], "returns": {"type": "void"}}, "help_draw": {"address": ["0x41A565"], "explanation": "help_draw renders the help dialogue on screen.", "args": [], "returns": {"type": "void"}}, "j_hero_cpp_init": {"address": ["0x448755"], "explanation": "j_hero_cpp_init initializes the C++ runtime of hero.cpp.", "args": [], "returns": {"type": "void"}}, "hero_cpp_init": {"address": ["0x44875A"], "explanation": "hero_cpp_init initializes the C++ runtime of hero.cpp.", "args": [], "returns": {"type": "void"}}, "j_init_cpp_init": {"address": ["0x41A7B3"], "explanation": "j_init_cpp_init initializes the C++ runtime of init.cpp.", "args": [], "returns": {"type": "void"}}, "init_cpp_init": {"address": ["0x41A7B8"], "explanation": "init_cpp_init initializes the C++ runtime of init.cpp.", "args": [], "returns": {"type": "void"}}, "init_cleanup": {"address": ["0x41A7C3"], "explanation": "init_cleanup terminates initialized resources.", "args": [{"name": "show_cursor", "type": "bool32_t"}], "returns": {"type": "void"}}, "init_run_office_from_start_menu": {"address": ["0x41A84C"], "explanation": "init_run_office_from_start_menu runs Microsoft Office from the Start Menu if\na process with the \"MOM Parent\" class has been identified and killed.", "args": [], "returns": {"type": "void"}}, "init_run_office": {"address": ["0x41A8B9"], "explanation": "init_run_office runs Microsoft Office if there exists a shortcut to it from\nwithin the given directory.", "args": [{"name": "dir", "type": "char *"}], "returns": {"type": "void"}}, "init_disable_screensaver": {"address": ["0x41AA2C"], "explanation": "init_disable_screensaver either disables or restores the previous state of\nthe screensaver, depending on the given boolean value.", "args": [{"name": "disable", "type": "bool32_t"}], "returns": {"type": "void"}}, "init_kill_mom_parent": {"address": ["0x41AC00"], "explanation": "init_kill_mom_parent kills the \"MOM Parent\" process if present.", "args": [], "returns": {"type": "void"}}, "init_await_mom_parent_exit": {"address": ["0x41AC71"], "explanation": "init_await_mom_parent_exit waits up to 4 seconds for the \"MOM Parent\" process\nto exit.", "args": [], "returns": {"type": "void"}}, "init_strip_trailing_slash": {"address": ["0x41AF22"], "explanation": "init_trim_trailing_slash removes up to one trailing slash characters from\npath.", "args": [{"name": "path", "type": "char *"}], "returns": {"type": "char *"}}, "init_get_file_info": {"address": ["0x41AFCE"], "explanation": "init_get_file_info retrieves the game path and version number from the\nexecutable.", "args": [], "returns": {"type": "void"}}, "j_interfac_cpp_init": {"address": ["0x41B190"], "explanation": "j_interfac_cpp_init initializes the C++ runtime of interfac.cpp.", "args": [], "returns": {"type": "void"}}, "interfac_cpp_init": {"address": ["0x41B195"], "explanation": "interfac_cpp_init initializes the C++ runtime of interfac.cpp.", "args": [], "returns": {"type": "void"}}, "interfac_inc_progress": {"address": ["0x41B1DF"], "explanation": "interfac_inc_progress increments the loading progress and renders the active\ncut scene on screen.", "args": [], "returns": {"type": "bool32_t"}}, "interfac_draw_cut_scene": {"address": ["0x41B218"], "explanation": "interfac_draw_cut_scene renders the active cut scene on screen.", "args": [], "returns": {"type": "void"}}, "inv_cleanup": {"address": ["0x41B814"], "explanation": "inv_cleanup releases the resources used by the inventory.", "args": [], "returns": {"type": "void"}}, "inv_load_graphics": {"address": ["0x41B826"], "explanation": "inv_load_graphics loads the inventory graphics of the active player class.", "args": [], "returns": {"type": "void"}}, "inv_draw_inventory": {"address": ["0x41B8C4"], "explanation": "inv_draw_inventory renders the inventory on screen.", "args": [], "returns": {"type": "void"}}, "inv_draw_belt": {"address": ["0x41C060"], "explanation": "inv_draw_belt renders the belt on screen.", "args": [], "returns": {"type": "void"}}, "items_load_drop_graphics": {"address": ["0x41F096"], "psx_ref": ["0x8003E24C"], "psx_def": ["void InitItemGFX__Fv()"], "explanation": "items_load_drop_graphics loads item drop graphics and initializes the\ntracking of dropped unique items.", "args": [], "returns": {"type": "void"}}, "items_can_place": {"address": ["0x41F0E8"], "psx_ref": ["0x8003E254"], "psx_def": ["unsigned char ItemPlace__Fii(int xp, int yp)"], "explanation": "items_can_place reports whether it is possible to place an item at the given\ncoordinate.", "args": [{"name": "x", "type": "int"}, {"name": "y", "type": "int"}], "returns": {"type": "bool32_t"}}, "items_add_init_items": {"address": ["0x41F13A"], "psx_ref": ["0x8003E2F0"], "psx_def": ["void AddInitItems__Fv()"], "explanation": "items_add_init_items adds the starting items on the ground of the map.", "args": [], "returns": {"type": "void"}}, "items_init": {"address": ["0x41F24E"], "psx_ref": ["0x8003E4F8"], "psx_def": ["void InitItems__Fb(unknown re_init)"], "explanation": "items_init initializes the items on the ground of the map.", "args": [], "returns": {"type": "void"}}, "items_calc_player_item_values": {"address": ["0x41F320"], "psx_ref": ["0x8003E6B0"], "psx_def": ["void CalcPlrItemVals__FiUc(int p, unsigned char Loadgfx)"], "explanation": "items_calc_player_item_values calculates the player bonus from items.", "args": [{"name": "player_num", "type": "int"}, {"name": "load_gfx", "type": "bool32_t"}], "returns": {"type": "void"}}, "items_create_from_item_id": {"address": ["0x41FD98"], "psx_ref": ["0x8003FBC8"], "psx_def": ["void SetPlrHandItem__FP10ItemStructi(struct ItemStruct *h, int idata)"], "explanation": "items_create_from_item_id creates a new item based on the given item ID.", "args": [{"name": "item", "type": "Item *"}, {"name": "item_id", "type": "item_id"}], "returns": {"type": "void"}}, "items_init_item_seed": {"address": ["0x41FE98"], "psx_ref": ["0x8003FCE0"], "psx_def": ["void GetPlrHandSeed__FP10ItemStruct(struct ItemStruct *h)"], "explanation": "items_init_item_seed generates a unique seed for the item.", "args": [{"name": "item", "type": "Item *"}], "returns": {"type": "void"}}, "items_gen_seed": {"address": ["0x41FEA4"], "explanation": "items_gen_seed generates a seed for the given item, distinct from the seed\nvalues of all other active items.", "args": [{"name": "player_num", "type": "int"}, {"name": "item_seed", "type": "int32_t *"}], "returns": {"type": "void"}}, "items_create_player_starting_items": {"address": ["0x41FF4E"], "psx_ref": ["0x8003FEAC"], "psx_def": ["void CreatePlrItems__Fi(int p)"], "explanation": "items_create_player_starting_items creates the starting items for the given\nplayer.", "args": [{"name": "player_num", "type": "int"}], "returns": {"type": "void"}}, "items_get_rand_loot_id_from_monster": {"address": ["0x421A4B"], "explanation": "items_get_rand_loot_id_from_monster returns the loot ID of a random item\ndrop from the monster.\nThe loot ID is positive for regular items and negative for unique items, as\nfurther described by the following pseudo-code.\nswitch {\ncase loot_id > 0:\n/// regular item drop.\nitem_id = loot_id - 1\ncase loot_id < 0:\n/// unique item drop.\nunique_item_id = -loot_id - 1\ncase loot_id == 0:\n/// no item drop.\n}\nThe drops are calculated as follows.\n* Winged Fiends (i.e. Fiend, Blink, Gloom and Familiar) never drop items.\n* The Butcher always drops The Butcher's Cleaver.\n* Skeleton King always drops The Undead Crown.\n1) rnd(100) > 40: no drop\n2) rnd(100) > 25: drop gold\n3) Drop a random item with qlvl <= mlvl\n- The drop rate of an item determines if it has non-existant, regular\nor double chance of dropping.\n- In single player, items with the Resurrect or the Heal Other spell\nnever drop.\nReferences:\n* https:///github.com/sanctuary/notes/blob/master/enums.h#item_id\n* https:///github.com/sanctuary/notes/blob/master/enums.h#unique_item_id", "args": [{"name": "monster_num", "type": "int"}], "returns": {"type": "int"}}, "items_draw_unique_item_box": {"address": ["0x4236A6"], "explanation": "items_draw_unique_item_box renders the unique item box on screen.", "args": [], "returns": {"type": "void"}}, "items_is_equipable": {"address": ["0x4241D7"], "explanation": "items_is_equipable reports whether the given item is equipable.", "args": [{"name": "item", "type": "Item *"}], "returns": {"type": "bool32_t"}}, "items_create_base_gold": {"address": ["0x424D57"], "explanation": "items_create_base_gold creates the base gold item.", "args": [], "returns": {"type": "void"}}, "items_update_stores_equipable": {"address": ["0x42501F"], "explanation": "items_update_stores_equipable updates the equipability of store owner items.", "args": [], "returns": {"type": "void"}}, "loadsave_load_int8": {"address": ["0x426AE2"], "explanation": "loadsave_load_int8 loads the next 8-bit integer from the active save.", "args": [], "returns": {"type": "int8_t"}}, "loadsave_load_int32": {"address": ["0x426AF0"], "explanation": "loadsave_load_int32 loads the next 32-bit integer from the active save.", "args": [], "returns": {"type": "int32_t"}}, "loadsave_load_int32_2": {"address": ["0x426B2C"], "explanation": "loadsave_load_int32_2 loads the next 32-bit integer from the active save.", "args": [], "returns": {"type": "int32_t"}}, "loadsave_load_bool": {"address": ["0x426B68"], "explanation": "loadsave_load_bool loads the next 8-bit boolean from the active save.", "args": [], "returns": {"type": "bool32_t"}}, "loadsave_load_player": {"address": ["0x426B7F"], "explanation": "loadsave_load_player loads the next player from the active save.\nReferences:\n* https:///github.com/sanctuary/notes/blob/master/structs.h#player", "args": [{"name": "player_num", "type": "int"}], "returns": {"type": "void"}}, "loadsave_load_monster": {"address": ["0x426BA9"], "explanation": "loadsave_load_monster loads the next monster from the active save.\nReferences:\n* https:///github.com/sanctuary/notes/blob/master/structs.h#monster", "args": [{"name": "monster_num", "type": "int"}], "returns": {"type": "void"}}, "loadsave_load_missile": {"address": ["0x426BDE"], "explanation": "loadsave_load_missile loads the next missile from the active save.\nReferences:\n* https:///github.com/sanctuary/notes/blob/master/structs.h#missile", "args": [{"name": "missile_num", "type": "int"}], "returns": {"type": "void"}}, "loadsave_load_object": {"address": ["0x426C08"], "explanation": "loadsave_load_object loads the next object from the active save.\nReferences:\n* https:///github.com/sanctuary/notes/blob/master/structs.h#object", "args": [{"name": "object_num", "type": "int"}], "returns": {"type": "void"}}, "loadsave_load_item": {"address": ["0x426C2A"], "explanation": "loadsave_load_item loads the next item from the active save.\nReferences:\n* https:///github.com/sanctuary/notes/blob/master/structs.h#item", "args": [{"name": "item_num", "type": "int"}], "returns": {"type": "void"}}, "loadsave_load_griswold_premium_item": {"address": ["0x426C5F"], "explanation": "loadsave_load_griswold_premium_item loads the next Griswold premium item\nfrom the active save.\nReferences:\n* https:///github.com/sanctuary/notes/blob/master/structs.h#item", "args": [{"name": "griswold_premium_item_num", "type": "int"}], "returns": {"type": "void"}}, "loadsave_load_quest": {"address": ["0x426C89"], "explanation": "loadsave_load_quest loads the next quest, quest start coordinates, quest\ndlvl, quest dungeon type, and quest doom timer from the active save.\nReferences:\n* https:///github.com/sanctuary/notes/blob/master/structs.h#quest", "args": [{"name": "quest_num", "type": "int"}], "returns": {"type": "void"}}, "j_log_cpp_init_1": {"address": ["0x4279F2"], "explanation": "j_log_cpp_init_1 initializes the C++ runtime of log.cpp.", "args": [], "returns": {"type": "void"}}, "log_cpp_init_1": {"address": ["0x4279F7"], "explanation": "log_cpp_init_1 initializes the C++ runtime of log.cpp.", "args": [], "returns": {"type": "void"}}, "log_cpp_init_2": {"address": ["0x427A02"], "explanation": "log_cpp_init_2 initializes the C++ runtime of log.cpp.", "args": [], "returns": {"type": "void"}}, "j_mainmenu_cpp_init": {"address": ["0x427E0E"], "explanation": "j_mainmenu_cpp_init initializes the C++ runtime of mainmenu.cpp.", "args": [], "returns": {"type": "void"}}, "mainmenu_cpp_init": {"address": ["0x427E13"], "explanation": "mainmenu_cpp_init initializes the C++ runtime of mainmenu.cpp.", "args": [], "returns": {"type": "void"}}, "minitext_draw": {"address": ["0x428202"], "explanation": "minitext_draw renders a medium sized text message on screen.", "args": [], "returns": {"type": "void"}}, "missiles_get_spell_damage": {"address": ["0x4283C0"], "explanation": "missiles_get_spell_damage retrieves the min and max spell damage of the\ngiven spell.", "args": [{"name": "spell_id", "type": "spell_id"}, {"name": "damage_min", "type": "int *"}, {"name": "damage_max", "type": "int *"}], "returns": {"type": "void"}}, "j_monster_cpp_init": {"address": ["0x430FDF"], "explanation": "j_monster_cpp_init initializes the C++ runtime of monster.cpp.", "args": [], "returns": {"type": "void"}}, "monster_cpp_init": {"address": ["0x430FE4"], "explanation": "monster_cpp_init initializes the C++ runtime of monster.cpp.", "args": [], "returns": {"type": "void"}}, "j_movie_cpp_init": {"address": ["0x43AD33"], "explanation": "j_movie_cpp_init initializes the C++ runtime of movie.cpp.", "args": [], "returns": {"type": "void"}}, "movie_cpp_init": {"address": ["0x43AD38"], "explanation": "movie_cpp_init initializes the C++ runtime of movie.cpp.", "args": [], "returns": {"type": "void"}}, "j_mpqapi_cpp_init": {"address": ["0x43AE90"], "explanation": "j_mpqapi_cpp_init initializes the C++ runtime of mpqapi.cpp.", "args": [], "returns": {"type": "void"}}, "mpqapi_cpp_init": {"address": ["0x43AE95"], "explanation": "mpqapi_cpp_init initializes the C++ runtime of mpqapi.cpp.", "args": [], "returns": {"type": "void"}}, "mpqapi_set_hidden": {"address": ["0x43AEA0"], "explanation": "mpqapi_set_hidden sets the visibility of the given save file.", "args": [{"name": "save_path", "type": "char *"}, {"name": "hidden", "type": "bool32_t"}], "returns": {"type": "bool32_t"}}, "j_msg_cpp_init": {"address": ["0x43BBA4"], "explanation": "j_msg_cpp_init initializes the C++ runtime of msg.cpp.", "args": [], "returns": {"type": "void"}}, "msg_cpp_init": {"address": ["0x43BBA9"], "explanation": "msg_cpp_init initializes the C++ runtime of msg.cpp.", "args": [], "returns": {"type": "void"}}, "msg_is_portal_inactive": {"address": ["0x43C24F"], "psx_ref": ["0x8004F2F0"], "psx_def": ["unsigned char delta_portal_inited__Fi(int i)"], "explanation": "msg_is_portal_inactive reports whether the given portal is active.", "args": [{"name": "portal_num", "type": "int"}], "returns": {"type": "bool32_t"}}, "msg_send_cmd": {"address": ["0x43C873"], "psx_ref": ["0x8004F6D0"], "psx_def": ["void NetSendCmd__FUcUc(unsigned char bHiPri, unsigned char bCmd)"], "explanation": "msg_send_cmd sends a command message without body to connected peers.", "args": [{"name": "high_priority", "type": "bool32_t"}, {"name": "cmd", "type": "cmd"}], "returns": {"type": "void"}}, "msg_send_cmd_coord": {"address": ["0x43C8C7"], "psx_ref": ["0x8004F744"], "psx_def": ["void NetSendCmdLoc__FUcUcUcUc(unsigned char bHiPri, unsigned char bCmd, unsigned char x, unsigned char y)"], "explanation": "msg_send_cmd_coord sends a command message with X,Y coordinates to connected peers.", "args": [{"name": "high_priority", "type": "bool32_t"}, {"name": "cmd", "type": "cmd"}, {"name": "x", "type": "int8_t"}, {"name": "y", "type": "int8_t"}], "returns": {"type": "void"}}, "msg_send_cmd_coord_param1": {"address": ["0x43C8F3"], "psx_ref": ["0x8004F774"], "psx_def": ["void NetSendCmdLocParam1__FUcUcUcUcUs(unsigned char bHiPri, unsigned char bCmd, unsigned char x, unsigned char y, int wParam1)"], "explanation": "msg_send_cmd_coord_param1 sends a command message with X,Y coordinates and\none parameter to connected peers.", "args": [{"name": "high_priority", "type": "bool32_t"}, {"name": "cmd", "type": "cmd"}, {"name": "x", "type": "int8_t"}, {"name": "y", "type": "int8_t"}, {"name": "param1", "type": "int16_t"}], "returns": {"type": "void"}}, "msg_send_cmd_coord_param2": {"address": ["0x43C928"], "psx_ref": ["0x8004F7AC"], "psx_def": ["void NetSendCmdLocParam2__FUcUcUcUcUsUs(unsigned char bHiPri, unsigned char bCmd, unsigned char x, unsigned char y, int wParam1, int wParam2)"], "explanation": "msg_send_cmd_coord_param2 sends a command message with  X,Y coordinates and\ntwo parameters to connected peers.", "args": [{"name": "high_priority", "type": "bool32_t"}, {"name": "cmd", "type": "cmd"}, {"name": "x", "type": "int8_t"}, {"name": "y", "type": "int8_t"}, {"name": "param1", "type": "int16_t"}, {"name": "param2", "type": "int16_t"}], "returns": {"type": "void"}}, "msg_send_cmd_coord_param3": {"address": ["0x43C965"], "psx_ref": ["0x8004F7EC"], "psx_def": ["void NetSendCmdLocParam3__FUcUcUcUcUsUsUs(unsigned char bHiPri, unsigned char bCmd, unsigned char x, unsigned char y, int wParam1, int wParam2, int wParam3)"], "explanation": "msg_send_cmd_coord_param3 sends a command message with X,Y coordinates and\nthree parameters to connected peers.", "args": [{"name": "high_priority", "type": "bool32_t"}, {"name": "cmd", "type": "cmd"}, {"name": "x", "type": "int8_t"}, {"name": "y", "type": "int8_t"}, {"name": "param1", "type": "int16_t"}, {"name": "param2", "type": "int16_t"}, {"name": "param3", "type": "int16_t"}], "returns": {"type": "void"}}, "msg_send_cmd_param1": {"address": ["0x43C9AB"], "psx_ref": ["0x8004F834"], "psx_def": ["void NetSendCmdParam1__FUcUcUs(unsigned char bHiPri, unsigned char bCmd, unsigned short wParam1)"], "explanation": "msg_send_cmd_param1 sends a command message with one parameter to connected\npeers.", "args": [{"name": "high_priority", "type": "bool32_t"}, {"name": "cmd", "type": "cmd"}, {"name": "param1", "type": "int16_t"}], "returns": {"type": "void"}}, "msg_send_cmd_param2": {"address": ["0x43C9D3"], "psx_ref": ["0x8004F860"], "psx_def": ["void NetSendCmdParam2__FUcUcUsUs(unsigned char bHiPri, unsigned char bCmd, unsigned short wParam1, unsigned short wParam2)"], "explanation": "msg_send_cmd_param2 sends a command message with two parameters to connected\npeers.", "args": [{"name": "high_priority", "type": "bool32_t"}, {"name": "cmd", "type": "cmd"}, {"name": "param1", "type": "int16_t"}, {"name": "param2", "type": "int16_t"}], "returns": {"type": "void"}}, "msg_send_cmd_param3": {"address": ["0x43CA04"], "psx_ref": ["0x8004F890"], "psx_def": ["void NetSendCmdParam3__FUcUcUsUsUs(unsigned char bHiPri, unsigned char bCmd, unsigned short wParam1, unsigned short wParam2, int wParam3)"], "explanation": "msg_send_cmd_param3 sends a command message with three parameters to\nconnected peers.", "args": [{"name": "high_priority", "type": "bool32_t"}, {"name": "cmd", "type": "cmd"}, {"name": "param1", "type": "int16_t"}, {"name": "param2", "type": "int16_t"}, {"name": "param3", "type": "int16_t"}], "returns": {"type": "void"}}, "msg_send_cmd_sync_quest": {"address": ["0x43CA3D"], "psx_ref": ["0x8004F8C8"], "psx_def": ["void NetSendCmdQuest__FUcUc(unsigned char bHiPri, unsigned char q)"], "explanation": "msg_send_cmd_sync_quest sends a sync quest command message to connected\npeers.", "args": [{"name": "high_priority", "type": "bool32_t"}, {"name": "quest_id", "type": "quest_id"}], "returns": {"type": "void"}}, "msg_send_cmd_get_item": {"address": ["0x43CA84"], "psx_ref": ["0x8004F93C"], "psx_def": ["void NetSendCmdGItem__FUcUcUcUcUc(unsigned char bHiPri, unsigned char bCmd, unsigned char mast, unsigned char pnum, int ii)"], "explanation": "msg_send_cmd_get_item sends a get item command message to connected peers.", "args": [{"name": "high_priority", "type": "bool32_t"}, {"name": "cmd", "type": "cmd"}, {"name": "player_num_master", "type": "int8_t"}, {"name": "player_num", "type": "int8_t"}, {"name": "item_num", "type": "int8_t"}], "returns": {"type": "void"}}, "msg_parse_cmd_impact_mana_shield": {"address": ["0x43F830"], "explanation": "msg_parse_cmd_impact_mana_shield parses a impact mana shield command.", "args": [{"name": "msg", "type": "uint8_t *"}, {"name": "player_num", "type": "int"}], "returns": {"type": "int"}}, "j_msgcmd_cpp_init_1": {"address": ["0x43F849"], "explanation": "j_msgcmd_cpp_init_1 initializes the C++ runtime of msgcmd.cpp.", "args": [], "returns": {"type": "void"}}, "msgcmd_cpp_init_1": {"address": ["0x43F84E"], "explanation": "msgcmd_cpp_init_1 initializes the C++ runtime of msgcmd.cpp.", "args": [], "returns": {"type": "void"}}, "msgcmd_cpp_init_2": {"address": ["0x43F859"], "explanation": "msgcmd_cpp_init_2 initializes the C++ runtime of msgcmd.cpp.", "args": [], "returns": {"type": "void"}}, "j_multi_cpp_init": {"address": ["0x43FAC4"], "explanation": "j_multi_cpp_init initializes the C++ runtime of multi.cpp.", "args": [], "returns": {"type": "void"}}, "multi_cpp_init": {"address": ["0x43FAC9"], "explanation": "multi_cpp_init initializes the C++ runtime of multi.cpp.", "args": [], "returns": {"type": "void"}}, "multi_cleanup": {"address": ["0x44055D"], "explanation": "multi_cleanup terminates the multiplayer system.", "args": [], "returns": {"type": "void"}}, "j_nthread_cpp_init_1": {"address": ["0x440DAE"], "explanation": "j_nthread_cpp_init_1 initializes the C++ runtime of nthread.cpp.", "args": [], "returns": {"type": "void"}}, "nthread_cpp_init_1": {"address": ["0x440DB3"], "explanation": "nthread_cpp_init_1 initializes the C++ runtime of nthread.cpp.", "args": [], "returns": {"type": "void"}}, "nthread_cpp_init_2": {"address": ["0x440DBE"], "explanation": "nthread_cpp_init_2 initializes the C++ runtime of nthread.cpp.", "args": [], "returns": {"type": "void"}}, "nthread_cleanup": {"address": ["0x441145"], "explanation": "nthread_cleanup terminates the networking thread.", "args": [], "returns": {"type": "void"}}, "objects_add_l1_objects": {"address": ["0x441A00"], "psx_ref": ["0x801583A0"], "psx_def": ["void AddL1Objs__Fiiii(int x1, int y1, int x2, int y2)"], "explanation": "objects_add_l1_objects adds Cathedral objects.", "args": [{"name": "x_start", "type": "int"}, {"name": "y_start", "type": "int"}, {"name": "x_end", "type": "int"}, {"name": "y_end", "type": "int"}], "returns": {"type": "void"}}, "objects_add_l2_objects": {"address": ["0x441A98"], "psx_ref": ["0x801584AC"], "psx_def": ["void AddL2Objs__Fiiii(int x1, int y1, int x2, int y2)"], "explanation": "objects_add_l2_objects adds Catacombs objects.", "args": [{"name": "x_start", "type": "int"}, {"name": "y_start", "type": "int"}, {"name": "x_end", "type": "int"}, {"name": "y_end", "type": "int"}], "returns": {"type": "void"}}, "objects_add_l3_objects": {"address": ["0x441B16"], "psx_ref": ["0x801585A8"], "psx_def": ["void AddL3Objs__Fiiii(int x1, int y1, int x2, int y2)"], "explanation": "objects_add_l3_objects adds Hell objects.", "args": [{"name": "x_start", "type": "int"}, {"name": "y_start", "type": "int"}, {"name": "x_end", "type": "int"}, {"name": "y_end", "type": "int"}], "returns": {"type": "void"}}, "objects_add_l2_torches": {"address": ["0x441BA0"], "psx_ref": ["0x80158710"], "psx_def": ["void AddL2Torches__Fv()"], "explanation": "objects_add_l2_torches adds torches to Catacombs maps.", "args": [], "returns": {"type": "void"}}, "objects_add_traps": {"address": ["0x441CB3"], "psx_ref": ["0x801588AC"], "psx_def": ["void AddObjTraps__Fv()"], "explanation": "objects_add_traps adds traps to objects.", "args": [], "returns": {"type": "void"}}, "objects_add_object": {"address": ["0x4431FF"], "psx_ref": ["0x80053AF8"], "psx_def": ["void AddObject__Fiii(int ot, int ox, int oy)"], "explanation": "objects_add_object adds a new object to the specifies coordinates.", "args": [{"name": "object_id", "type": "object_id"}, {"name": "x", "type": "int"}, {"name": "y", "type": "int"}], "returns": {"type": "void"}}, "j_palette_cpp_init": {"address": ["0x448DF5"], "explanation": "j_palette_cpp_init initializes the C++ runtime of palette.cpp.", "args": [], "returns": {"type": "void"}}, "palette_cpp_init": {"address": ["0x448DFA"], "explanation": "palette_cpp_init initializes the C++ runtime of palette.cpp.", "args": [], "returns": {"type": "void"}}, "palette_save_gamme": {"address": ["0x448E05"], "explanation": "palette_save_gamme stores the gamma correction and colour cycling settings.", "args": [], "returns": {"type": "void"}}, "palette_init": {"address": ["0x448E33"], "explanation": "palette_init initializes the palette.", "args": [], "returns": {"type": "void"}}, "palette_load_gamma": {"address": ["0x448EAB"], "explanation": "palette_load_gamme loads the gamma correction and colour cycling settings.", "args": [], "returns": {"type": "void"}}, "palette_load_system_palette": {"address": ["0x448F20"], "explanation": "palette_load_system_palette loads the system palette.", "args": [], "returns": {"type": "void"}}, "palette_load": {"address": ["0x448FC9"], "psx_ref": ["0x8007EE64"], "psx_def": ["void LoadPalette__FPCc(char *pszFileName)"], "explanation": "palette_load loads the given palette file.", "args": [{"name": "pal_path", "type": "char *"}], "returns": {"type": "void"}}, "palette_load_rand_level_palette": {"address": ["0x449025"], "psx_ref": ["0x8007EE6C"], "psx_def": ["void LoadRndLvlPal__Fi(int l)"], "explanation": "palette_load_rand_level_palette loads a random palette for the given dungeon\ntype.", "args": [{"name": "dtype", "type": "dungeon_type"}], "returns": {"type": "void"}}, "palette_realize": {"address": ["0x44906C"], "explanation": "palette_realize updates the system palette.", "args": [], "returns": {"type": "void"}}, "palette_inc_gamma": {"address": ["0x449097"], "explanation": "palette_inc_gamma increases the gamma correction.", "args": [], "returns": {"type": "void"}}, "palette_update": {"address": ["0x4490D0"], "explanation": "palette_update updates the system palette.", "args": [], "returns": {"type": "void"}}, "palette_apply_gamma_correction": {"address": ["0x449107"], "explanation": "palette_apply_gamma_correction copies the first n entries of the source\npalette to the destination palette with applied gamma correction.", "args": [{"name": "dst", "type": "PALETTEENTRY *"}, {"name": "src", "type": "PALETTEENTRY *"}, {"name": "n", "type": "int"}], "returns": {"type": "void"}}, "palette_dec_gamma": {"address": ["0x4491D0"], "explanation": "palette_dec_gamma decreases the gamma correction.", "args": [], "returns": {"type": "void"}}, "palette_update_gamma": {"address": ["0x449209"], "explanation": "palette_update_gamma updates the gamma of the palette.", "args": [{"name": "gamma", "type": "int"}], "returns": {"type": "int"}}, "palette_set_black_palette": {"address": ["0x44923E"], "explanation": "palette_set_black_palette sets the active palette to black.", "args": [], "returns": {"type": "void"}}, "palette_set_brightness": {"address": ["0x449245"], "explanation": "palette_set_brightness sets the brightness of the active palette.", "args": [{"name": "brightness", "type": "int"}], "returns": {"type": "void"}}, "palette_brightness_fade_in": {"address": ["0x4492B0"], "psx_ref": ["0x8007F1F0"], "psx_def": ["unknown PaletteFadeIn__Fi(int fr)"], "explanation": "palette_brightness_fade_in increases the brightness of the active palette by\nthe specified increment size to create a fade in effect.", "args": [{"name": "inc", "type": "int"}], "returns": {"type": "void"}}, "palette_brightness_fade_out": {"address": ["0x449306"], "psx_ref": ["0x8007F2F8"], "psx_def": ["unknown PaletteFadeOut__Fi(int fr)"], "explanation": "palette_brightness_fade_out decreases the brightness of the active palette by\nthe specified decrement size to create a fade out effect.", "args": [{"name": "dec", "type": "int"}], "returns": {"type": "void"}}, "palette_update_caves": {"address": ["0x449336"], "explanation": "palette_update_caves updates the palettes of Caves.", "args": [], "returns": {"type": "void"}}, "palette_update_quest_palette": {"address": ["0x449398"], "explanation": "palette_update_quest_palette updates palette entries related to the quest\nlevel.", "args": [{"name": "n", "type": "int"}], "returns": {"type": "void"}}, "palette_get_colour_cycling": {"address": ["0x4493C6"], "explanation": "palette_get_colour_cycling reports whether colour cycling is enabled.", "args": [], "returns": {"type": "bool32_t"}}, "palette_set_color_cycling": {"address": ["0x4493CC"], "explanation": "palette_set_colour_cycling sets the colour cycling to enabled or disabled.", "args": [{"name": "enabled", "type": "bool32_t"}], "returns": {"type": "void"}}, "j_pfile_cpp_init": {"address": ["0x4498EC"], "explanation": "j_pfile_cpp_init initializes the C++ runtime of pfile.cpp.", "args": [], "returns": {"type": "void"}}, "pfile_cpp_init": {"address": ["0x4498F1"], "explanation": "pfile_cpp_init initializes the C++ runtime of pfile.cpp.", "args": [], "returns": {"type": "void"}}, "pfile_init_save_directory": {"address": ["0x4498FC"], "explanation": "pfile_init_save_directory initializes the save directory.", "args": [], "returns": {"type": "void"}}, "pfile_check_available_space": {"address": ["0x44995B"], "explanation": "pfile_check_free_space validates that the hard drive of the given directory\nhas at least 10 MB free space available.", "args": [{"name": "dir", "type": "char *"}], "returns": {"type": "void"}}, "pfile_get_save_num_from_name": {"address": ["0x449A33"], "explanation": "pfile_get_save_num_from_name returns the save number for the given character\nname.", "args": [{"name": "name", "type": "char *"}], "returns": {"type": "int"}}, "pfile_get_save_path": {"address": ["0x449B30"], "explanation": "pfile_get_save_path retrieves the save path for the given save number.", "args": [{"name": "save_path", "type": "char *"}, {"name": "size", "type": "int"}, {"name": "save_num", "type": "int"}], "returns": {"type": "void"}}, "pfile_strcpy": {"address": ["0x44A727"], "explanation": "pfile_strcpy copies the source string to the destination buffer.", "args": [{"name": "dst", "type": "char *"}, {"name": "src", "type": "char *"}], "returns": {"type": "void"}}, "j_player_cpp_init": {"address": ["0x44A8E6"], "explanation": "j_player_cpp_init initializes the C++ runtime of player.cpp.", "args": [], "returns": {"type": "void"}}, "player_cpp_init": {"address": ["0x44A8EB"], "explanation": "player_cpp_init initializes the C++ runtime of player.cpp.", "args": [], "returns": {"type": "void"}}, "player_do_spell": {"address": ["0x44EAC6"], "psx_ref": ["0x80063F54"], "psx_def": ["int PM_DoSpell__FP12PlayerStruct(struct PlayerStruct *ptrplr)"], "explanation": "player_do_spell initiates a spell action for the given player.", "args": [{"name": "player_num", "type": "int"}], "returns": {"type": "int"}}, "player_process": {"address": ["0x44FB32"], "psx_ref": ["0x80065168"], "psx_def": ["void ProcessPlayers__Fv()"], "explanation": "player_process processes any game state changes of the player, since the last\ngame tick.", "args": [], "returns": {"type": "void"}}, "player_init_dungeon_msgs": {"address": ["0x450AA0"], "psx_ref": ["0x80067124"], "psx_def": ["void InitDungMsgs__Fi(int pnum)"], "explanation": "player_init_dungeon_msgs initializes the player dungeon messages game state.", "args": [{"name": "player_num", "type": "int"}], "returns": {"type": "void"}}, "plrmsg_draw": {"address": ["0x450EAA"], "explanation": "plrmsg_draw renders player messages on screen.", "args": [], "returns": {"type": "void"}}, "portal_init": {"address": ["0x450FFE"], "psx_ref": ["0x8015E77C"], "psx_def": ["void InitPortals__Fv()"], "explanation": "portal_init initializes the portals game state.", "args": [], "returns": {"type": "void"}}, "quests_init": {"address": ["0x45138E"], "psx_ref": ["0x8015E7DC"], "psx_def": ["void InitQuests__Fv()"], "explanation": "quests_init initializes the quests game state.", "args": [], "returns": {"type": "void"}}, "quests_is_active": {"address": ["0x451831"], "psx_ref": ["0x80067B70"], "psx_def": ["unsigned char QuestStatus__Fi(int i)"], "explanation": "quests_is_active reports whether the given quest is active.\nNOTE: quest_num and quest_id are equivalent, as indicated by this function.", "args": [{"name": "quest_num", "type": "quest_id"}], "returns": {"type": "bool32_t"}}, "quests_init_the_butcher_area": {"address": ["0x451BEA"], "psx_ref": ["0x8015ED8C"], "psx_def": ["void DrawButcher__Fv()"], "explanation": "quests_init_the_butcher_area initializes the quest area of The Butcher.", "args": [], "returns": {"type": "void"}}, "quests_init_the_curse_of_king_leoric_area": {"address": ["0x451C11"], "psx_ref": ["0x8015EDD0"], "psx_def": ["void DrawSkelKing__Fiii(int q, int x, int y)"], "explanation": "quests_init_the_curse_of_king_leoric_area initializes the quest area of The\nCurse of King Leoric.", "args": [{"name": "quest_id", "type": "quest_id"}, {"name": "xx", "type": "int"}, {"name": "yy", "type": "int"}], "returns": {"type": "void"}}, "quests_init_warlord_of_blood_area": {"address": ["0x451C32"], "psx_ref": ["0x8015EE64"], "psx_def": ["void DrawWarLord__Fii(int x, int y)"], "explanation": "quests_init_warlord_of_blood_area initializes the quest area of Warlord of\nBlood.", "args": [{"name": "xx", "type": "int"}, {"name": "yy", "type": "int"}], "returns": {"type": "void"}}, "quests_init_the_chamber_of_bone_area": {"address": ["0x451CC2"], "psx_ref": ["0x8015EF60"], "psx_def": ["void DrawSChamber__Fiii(int q, int x, int y)"], "explanation": "quests_init_the_chamber_of_bone_area initializes the quest area of The\nChamber of Bone.", "args": [{"name": "quest_id", "type": "quest_id"}, {"name": "xx", "type": "int"}, {"name": "yy", "type": "int"}], "returns": {"type": "void"}}, "quests_init_odgens_sign_area": {"address": ["0x451D7C"], "psx_ref": ["0x8015F09C"], "psx_def": ["void DrawLTBanner__Fii(int x, int y)"], "explanation": "quests_init_odgens_sign_area initializes the quest area of Odgen's Sign.", "args": [{"name": "xx", "type": "int"}, {"name": "yy", "type": "int"}], "returns": {"type": "void"}}, "quests_init_halls_of_the_blind_area": {"address": ["0x451E08"], "psx_ref": ["0x8015F178"], "psx_def": ["void DrawBlind__Fii(int x, int y)"], "explanation": "quests_init_halls_of_the_blind_area initializes the quest area of Halls of\nthe Blind.", "args": [{"name": "xx", "type": "int"}, {"name": "yy", "type": "int"}], "returns": {"type": "void"}}, "quests_init_valor_area": {"address": ["0x451E94"], "psx_ref": ["0x8015F254"], "psx_def": ["void DrawBlood__Fii(int x, int y)"], "explanation": "quests_init_valor_area initializes the quest area of Valor.", "args": [{"name": "xx", "type": "int"}, {"name": "yy", "type": "int"}], "returns": {"type": "void"}}, "quests_init_quest_area": {"address": ["0x451F20"], "psx_ref": ["0x8015F334"], "psx_def": ["void DRLG_CheckQuests__Fii(int x, int y)"], "explanation": "quests_init_quest_area initializes the given quest area.", "args": [{"name": "xx", "type": "int"}, {"name": "yy", "type": "int"}], "returns": {"type": "void"}}, "quests_draw_quest_log": {"address": ["0x4525CD"], "explanation": "quests_draw renders the quest log on screen.", "args": [], "returns": {"type": "void"}}, "restricted_has_write_access": {"address": ["0x4528F7"], "explanation": "restricted_has_write_access reports whether the process has write access to\nthe game directory.", "args": [], "returns": {"type": "bool32_t"}}, "j_scrollrt_cpp_init": {"address": ["0x452975"], "explanation": "j_scrollrt_cpp_init initializes the C++ runtime of scrollrt.cpp.", "args": [], "returns": {"type": "void"}}, "scrollrt_cpp_init": {"address": ["0x45297A"], "explanation": "scrollrt_cpp_init initializes the C++ runtime of scrollrt.cpp.", "args": [], "returns": {"type": "void"}}, "scrollrt_draw": {"address": ["0x453160"], "explanation": "scrollrt_draw renders the UI and the game world in dungeons on screen.", "args": [{"name": "col", "type": "int"}, {"name": "row", "type": "int"}], "returns": {"type": "void"}}, "scrollrt_draw_game": {"address": ["0x453272"], "explanation": "scrollrt_draw_game renders the game world in dungeons on screen.", "args": [{"name": "col", "type": "int"}, {"name": "row", "type": "int"}], "returns": {"type": "void"}}, "scrollrt_draw_zoomed_game": {"address": ["0x455BD4"], "explanation": "scrollrt_draw_zoomed_game renders a zoomed-in version of the game world in\ndungeons on screen.", "args": [{"name": "col", "type": "int"}, {"name": "row", "type": "int"}], "returns": {"type": "void"}}, "setmaps_get_object_num": {"address": ["0x456625"], "psx_ref": ["0x801552D8"], "psx_def": ["int ObjIndex__Fii(int x, int y)"], "explanation": "setmaps_get_object_num returns the active object numer at the given\ncoordinate.", "args": [{"name": "x", "type": "int"}, {"name": "y", "type": "int"}], "returns": {"type": "int"}}, "setmaps_add_objects_on_skeleton_kings_lair": {"address": ["0x45666B"], "psx_ref": ["0x8015538C"], "psx_def": ["void AddSKingObjs__Fv()"], "explanation": "setmaps_add_objects_on_skeleton_kings_lair adds objects to Skeleton King's\nLair.", "args": [], "returns": {"type": "void"}}, "setmaps_add_objects_bone_chamber": {"address": ["0x45671A"], "psx_ref": ["0x801554BC"], "psx_def": ["void AddSChamObjs__Fv()"], "explanation": "setmaps_add_objects_bone_chamber adds objects to the Bone Chamber.", "args": [], "returns": {"type": "void"}}, "setmaps_add_objects_archbishop_lazarus_lair": {"address": ["0x456755"], "psx_ref": ["0x80155538"], "psx_def": ["void AddVileObjs__Fv()"], "explanation": "setmaps_add_objects_archbishop_lazarus_lair adds objects to Archbishop\nLazarus' Lair.", "args": [], "returns": {"type": "void"}}, "setmaps_load_transparency": {"address": ["0x4567AD"], "psx_ref": ["0x801555E4"], "psx_def": ["void DRLG_SetMapTrans__FPc(char *sFileName)"], "explanation": "setmaps_load_transparency loads transparency of the map from the given DUN\nfile.", "args": [{"name": "dun_path", "type": "char *"}], "returns": {"type": "void"}}, "setmaps_load_quest_level": {"address": ["0x456819"], "psx_ref": ["0x801556A8"], "psx_def": ["void LoadSetMap__Fv()"], "explanation": "setmaps_load_quest_level loads the map of the active quest level.", "args": [], "returns": {"type": "void"}}, "sha1_reset": {"address": ["0x456A16"], "explanation": "sha1_reset resets the global SHA-1 contexts.", "args": [], "returns": {"type": "void"}}, "sha1_final": {"address": ["0x456A2B"], "explanation": "sha1_final copies the message digest of the given SHA-1 context to dst.", "args": [{"name": "ctx_id", "type": "int"}, {"name": "dst", "type": "uint8_t (*)[20]"}], "returns": {"type": "void"}}, "sha1": {"address": ["0x456A4D"], "explanation": "sha1 adds the 64-byte block of data to the running hash of the given SHA-1\ncontext and stores the final message digest in dst.", "args": [{"name": "ctx_id", "type": "int"}, {"name": "data", "type": "const uint8_t *"}, {"name": "dst", "type": "uint8_t (*)[20]"}], "returns": {"type": "void"}}, "sha1_update": {"address": ["0x456A73"], "explanation": "sha1_update adds the data to the running hash of the given SHA-1 context.", "args": [{"name": "ctx", "type": "SHA1Context *"}, {"name": "data", "type": "const uint8_t *"}, {"name": "len", "type": "int"}], "returns": {"type": "void"}}, "sha1_transform": {"address": ["0x456AC4"], "explanation": "sha1_transform performs a SHA-1 transformation on the 64-byte block of the\ngiven SHA-1 context.", "args": [{"name": "ctx", "type": "SHA1Context *"}], "returns": {"type": "void"}}, "sha1_init": {"address": ["0x456C82"], "explanation": "sha1_init initializes the given SHA-1 context.", "args": [{"name": "ctx_id", "type": "int"}], "returns": {"type": "void"}}, "j_sound_cpp_init": {"address": ["0x456CBB"], "explanation": "j_sound_cpp_init initializes the C++ runtime of sound.cpp.", "args": [], "returns": {"type": "void"}}, "sound_cpp_init": {"address": ["0x456CC0"], "explanation": "sound_cpp_init initializes the C++ runtime of sound.cpp.", "args": [], "returns": {"type": "void"}}, "sound_update": {"address": ["0x456CCB"], "psx_ref": ["0x80077D14"], "psx_def": ["void snd_update__FUc(unsigned char bStopAll)"], "explanation": "sound_update stops finished sounds from playing on all audio channels.", "args": [{"name": "stop_all", "type": "bool32_t"}], "returns": {"type": "void"}}, "sound_file_stop": {"address": ["0x456D22"], "psx_ref": ["0x80077D1C"], "psx_def": ["void snd_stop_snd__FP4TSnd(struct TSnd *pSnd)"], "explanation": "sound_file_stop stops the given sound file from playing.", "args": [{"name": "sound_file", "type": "SoundFile *"}], "returns": {"type": "void"}}, "sound_file_is_playing": {"address": ["0x456D34"], "psx_ref": ["0x80077F70"], "psx_def": ["unsigned char snd_playing__Fi(int SFXNo)"], "explanation": "sound_file_is_playing reports whether the given sound file is playing.", "args": [{"name": "sound_file", "type": "SoundFile *"}], "returns": {"type": "bool32_t"}}, "sound_file_play": {"address": ["0x456D60"], "psx_ref": ["0x80077D58"], "psx_def": ["void snd_play_snd__FP4TSFXll(struct TSFX *pSnd, long lVolume, long lPan)"], "explanation": "sound_file_play plays the given sound file.", "args": [{"name": "sound_file", "type": "SoundFile *"}, {"name": "volume_delta", "type": "int"}, {"name": "pan", "type": "int"}], "returns": {"type": "void"}}, "sound_dup_channel": {"address": ["0x456E39"], "explanation": "sound_dup_channel returns a duplicate of the given audio channel.", "args": [{"name": "DSB", "type": "IDirectSoundBuffer *"}], "returns": {"type": "IDirectSoundBuffer *"}}, "sound_file_reload": {"address": ["0x456E74"], "explanation": "sound_file_reload reloads the given sound file.", "args": [{"name": "sound_file", "type": "SoundFile *"}, {"name": "DSB", "type": "IDirectSoundBuffer *"}], "returns": {"type": "bool32_t"}}, "sound_file_load": {"address": ["0x456F07"], "explanation": "sound_file_load loads the given sound file.", "args": [{"name": "path", "type": "char *"}], "returns": {"type": "SoundFile *"}}, "sound_CreateSoundBuffer": {"address": ["0x457003"], "explanation": "sound_CreateSoundBuffer creates a sound buffer for the given sound file.", "args": [{"name": "sound_file", "type": "SoundFile *"}], "returns": {"type": "void"}}, "sound_file_cleanup": {"address": ["0x457060"], "explanation": "sound_file_cleanup stops the given sound file and releases its resources.", "args": [{"name": "sound_file", "type": "SoundFile *"}], "returns": {"type": "void"}}, "sound_init": {"address": ["0x45708B"], "psx_ref": ["0x80077E40"], "psx_def": ["void snd_init__FUl(unsigned long hWnd)"], "explanation": "sound_init initializes the sound system.", "args": [{"name": "hWnd", "type": "HWND"}], "returns": {"type": "void"}}, "sound_load_volume": {"address": ["0x45712B"], "explanation": "sound_load_volume loads the sound volume.", "args": [{"name": "value_name", "type": "char *"}, {"name": "value", "type": "int *"}], "returns": {"type": "void"}}, "sound_create_primary_buffer": {"address": ["0x45717C"], "explanation": "sound_create_primary_buffer creates a sound buffer for the given music track.", "args": [{"name": "music_track", "type": "int"}], "returns": {"type": "void"}}, "sound_DirectSoundCreate": {"address": ["0x45727E"], "explanation": "sound_DirectSoundCreate initializes the DirectSound interface.", "args": [{"name": "guid", "type": "GUID *"}, {"name": "DS", "type": "IDirectSound **"}, {"name": "always_null", "type": "int"}], "returns": {"type": "int"}}, "sound_cleanup": {"address": ["0x4572FF"], "explanation": "sound_cleanup terminates the sound system.", "args": [], "returns": {"type": "void"}}, "sound_store_volume": {"address": ["0x457358"], "explanation": "sound_store_volume stores the sound volume.", "args": [{"name": "key", "type": "char *"}, {"name": "value", "type": "int"}], "returns": {"type": "void"}}, "sound_stop_music": {"address": ["0x457367"], "psx_ref": ["0x80077E50"], "psx_def": ["void music_stop__Fv()"], "explanation": "sound_stop_music stops the background music playback.", "args": [], "returns": {"type": "void"}}, "sound_start_music": {"address": ["0x457393"], "psx_ref": ["0x80077ED0"], "psx_def": ["void music_start__Fi(int nTrack)"], "explanation": "sound_start_music starts the background music playback.", "args": [{"name": "music_track_id", "type": "int"}], "returns": {"type": "void"}}, "sound_disable_music": {"address": ["0x4573FE"], "explanation": "sound_disable_music disables or enables the music.", "args": [{"name": "disable", "type": "bool32_t"}], "returns": {"type": "void"}}, "sound_get_or_set_music_volume": {"address": ["0x457418"], "explanation": "sound_get_or_set_music_volume gets or sets the music volume.", "args": [{"name": "volume", "type": "int"}], "returns": {"type": "int"}}, "sound_get_or_set_sound_volume": {"address": ["0x45743B"], "explanation": "sound_get_or_set_sound_volume gets or sets the sound volume.", "args": [{"name": "volume", "type": "int"}], "returns": {"type": "int"}}, "spell_get_mana_cost": {"address": ["0x45744E"], "psx_ref": ["0x80077054"], "psx_def": ["int GetManaAmount__Fii(int id, int sn)"], "explanation": "spell_get_mana_cost returns the mana cost of the given spell.", "args": [{"name": "player_num", "type": "int"}, {"name": "spell_id", "type": "spell_id"}], "returns": {"type": "int"}}, "spell_use_mana": {"address": ["0x45753A"], "psx_ref": ["0x80077308"], "psx_def": ["void UseMana__Fii(int id, int sn)"], "explanation": "spell_use_mana spends the mana required to cast the given spell.", "args": [{"name": "player_num", "type": "int"}, {"name": "spell_id", "type": "spell_id"}], "returns": {"type": "void"}}, "spell_can_cast": {"address": ["0x457584"], "psx_ref": ["0x80077498"], "psx_def": ["unsigned char CheckSpell__FiicUc(int id, int sn, char st, unsigned char manaonly)"], "explanation": "spell_can_cast reports whether the player may cast the specified spell.", "args": [{"name": "player_num", "type": "int"}, {"name": "spell_id", "type": "int"}, {"name": "spell_type", "type": "int"}, {"name": "mana_only", "type": "bool32_t"}], "returns": {"type": "bool32_t"}}, "spell_cast": {"address": ["0x4575D5"], "psx_ref": ["0x80077538"], "psx_def": ["void CastSpell__Fiiiiiiii(int id, int spl, int sx, int sy, int dx, int dy, int caster, int spllvl)"], "explanation": "spell_cast casts the given spell.", "args": [{"name": "player_num", "type": "int"}, {"name": "spell_id", "type": "spell_id"}, {"name": "x", "type": "int"}, {"name": "y", "type": "int"}, {"name": "target_x", "type": "int"}, {"name": "target_y", "type": "int"}, {"name": "target_num", "type": "int"}, {"name": "spell_lvl", "type": "int"}], "returns": {"type": "void"}}, "spell_cast_resurrect": {"address": ["0x4576B1"], "psx_ref": ["0x80077850"], "psx_def": ["void DoResurrect__Fii(int pnum, int rid)"], "explanation": "spell_cast_resurrect casts resurrect on the target player.", "args": [{"name": "player_num", "type": "int"}, {"name": "target_player_num", "type": "int"}], "returns": {"type": "void"}}, "spell_resurrect": {"address": ["0x4577CB"], "explanation": "spell_resurrect resurrects the given player.", "args": [{"name": "player_num", "type": "int"}], "returns": {"type": "void"}}, "spell_cast_heal_other": {"address": ["0x4578EE"], "psx_ref": ["0x80077AB8"], "psx_def": ["void DoHealOther__Fii(int pnum, int rid)"], "explanation": "spell_cast_heal_other casts heal other on the target player.", "args": [{"name": "player_num", "type": "int"}, {"name": "target_player_num", "type": "int"}], "returns": {"type": "void"}}, "stores_init": {"address": ["0x457A01"], "psx_ref": ["0x80162CDC"], "psx_def": ["void InitStores__Fv()"], "explanation": "stores_init initializes the resources used by store owners.", "args": [], "returns": {"type": "void"}}, "stores_renew_items": {"address": ["0x457A87"], "psx_ref": ["0x80162DD0"], "psx_def": ["void SetupTownStores__Fv()"], "explanation": "stores_renew_items renews the items sold in stores.", "args": [], "returns": {"type": "void"}}, "stores_cleanup": {"address": ["0x457B42"], "psx_ref": ["0x800695A4"], "psx_def": ["void FreeStoreMem__Fv()"], "explanation": "stores_cleanup releases the resources used by store owners.", "args": [], "returns": {"type": "void"}}, "stores_talk_griswold": {"address": ["0x4582B3"], "psx_ref": ["0x8006AA50"], "psx_def": ["void S_StartSmith__Fv()"], "explanation": "stores_talk_griswold initiates a dialogue with Griswold.", "args": [], "returns": {"type": "void"}}, "stores_talk_griswold_buy_basic": {"address": ["0x4586B3"], "psx_ref": ["0x8006ADE0"], "psx_def": ["void S_StartSBuy__Fv()"], "explanation": "stores_talk_griswold_buy_basic initiates a buy basic item dialogue with\nGriswold.", "args": [], "returns": {"type": "void"}}, "stores_talk_griswold_buy_premium": {"address": ["0x458851"], "psx_ref": ["0x8006B210"], "psx_def": ["unsigned char S_StartSPBuy__Fv()"], "explanation": "stores_talk_griswold_buy_premium initiates a buy premium item dialogue with\nGriswold.", "args": [], "returns": {"type": "bool32_t"}}, "stores_griswold_wants": {"address": ["0x458931"], "explanation": "stores_griswold_wants reports whether Griswold wants to buy the given\ninventory item.", "args": [{"name": "inv_num", "type": "int"}], "returns": {"type": "bool32_t"}}, "stores_talk_griswold_sell": {"address": ["0x458A59"], "psx_ref": ["0x8006B70C"], "psx_def": ["void S_StartSSell__Fv()"], "explanation": "stores_talk_griswold_sell initiates a sell player item dialogue with\nGriswold.", "args": [], "returns": {"type": "void"}}, "stores_is_damaged": {"address": ["0x458C0B"], "explanation": "stores_is_damaged reports whether the given inventory item is damaged (i.e.\nit may be repaired).", "args": [{"name": "inv_num", "type": "int"}], "returns": {"type": "bool32_t"}}, "stores_talk_griswold_repair": {"address": ["0x458C4E"], "psx_ref": ["0x8006BDD4"], "psx_def": ["void S_StartSRepair__Fv()"], "explanation": "stores_talk_griswold_repair initiates a repair player item dialogue with\nGriswold.", "args": [], "returns": {"type": "void"}}, "stores_talk_adria": {"address": ["0x458F3D"], "psx_ref": ["0x8006C2A4"], "psx_def": ["void S_StartWitch__Fv()"], "explanation": "stores_talk_adria initiates a dialogue with Adria.", "args": [], "returns": {"type": "void"}}, "stores_talk_adria_buy": {"address": ["0x45909F"], "psx_ref": ["0x8006C714"], "psx_def": ["void S_StartWBuy__Fv()"], "explanation": "stores_talk_adria_buy initiates a buy item dialogue with Adria.", "args": [], "returns": {"type": "void"}}, "stores_adria_wants": {"address": ["0x459169"], "explanation": "stores_adria_wants reports whether Adria wants to buy the given item; which\nis either an inventory or a belt item, as described below.\nswitch {\ncase inv_or_belt_num >= 0:\ninv_num = inv_or_belt_num\ncase inv_or_belt_num < 0:\nbelt_num = -inv_or_belt_num - 1\n}", "args": [{"name": "inv_or_belt_num", "type": "int"}], "returns": {"type": "bool32_t"}}, "stores_talk_adria_sell": {"address": ["0x4591C4"], "psx_ref": ["0x8006CBB4"], "psx_def": ["void S_StartWSell__Fv()"], "explanation": "stores_talk_adria_sell initiates a sell player item dialogue with Adria.", "args": [], "returns": {"type": "void"}}, "stores_has_used_charges": {"address": ["0x459431"], "explanation": "stores_has_used_charges reports whether the given inventory item is a staff\nwith consumed charges (i.e. it may be recharged).", "args": [{"name": "inv_num", "type": "int"}], "returns": {"type": "bool32_t"}}, "stores_talk_adria_recharge": {"address": ["0x4594E6"], "psx_ref": ["0x8006D440"], "psx_def": ["void S_StartWRecharge__Fv()"], "explanation": "stores_talk_adria_recharge initiates a recharge staff dialogue with Adria.", "args": [], "returns": {"type": "void"}}, "stores_talk_not_enough_gold": {"address": ["0x459693"], "psx_ref": ["0x8006D870"], "psx_def": ["void S_StartNoMoney__Fv()"], "explanation": "stores_talk_not_enough_gold informs the player that they have not enough\ngold to satisfy the deal.", "args": [], "returns": {"type": "void"}}, "stores_talk_not_enough_room": {"address": ["0x4596CD"], "psx_ref": ["0x8006D8D8"], "psx_def": ["void S_StartNoRoom__Fv()"], "explanation": "stores_talk_not_enough_room informs the player that they have not enough\nroom in inventory to complete the trade.", "args": [], "returns": {"type": "void"}}, "stores_talk_confirm": {"address": ["0x459700"], "psx_ref": ["0x8006D9EC"], "psx_def": ["void S_StartConfirm__Fv()"], "explanation": "stores_talk_confirm asks the player to confirm the deal.", "args": [], "returns": {"type": "void"}}, "stores_talk_wirt": {"address": ["0x459873"], "psx_ref": ["0x8006DD54"], "psx_def": ["void S_StartBoy__Fv()"], "explanation": "stores_talk_wirt initiates a dialogue with Wirt.", "args": [], "returns": {"type": "void"}}, "stores_talk_wirt_buy": {"address": ["0x459930"], "psx_ref": ["0x8006DEFC"], "psx_def": ["void S_StartBBoy__Fv()"], "explanation": "stores_talk_wirt_buy initiates a buy item dialogue with Wirt.", "args": [], "returns": {"type": "void"}}, "stores_talk_pepin": {"address": ["0x4599FD"], "psx_ref": ["0x8006E130"], "psx_def": ["void S_StartHealer__Fv()"], "explanation": "stores_talk_pepin initiates a dialogue with Pepin.", "args": [], "returns": {"type": "void"}}, "stores_talk_pepin_buy": {"address": ["0x459B55"], "psx_ref": ["0x8006E4EC"], "psx_def": ["void S_StartHBuy__Fv()"], "explanation": "stores_talk_pepin_buy initiates a buy item dialogue with Pepin.", "args": [], "returns": {"type": "void"}}, "stores_talk_cain": {"address": ["0x459C15"], "psx_ref": ["0x8006E624"], "psx_def": ["void S_StartStory__Fv()"], "explanation": "stores_talk_cain initiates a dialogue with Cain.", "args": [], "returns": {"type": "void"}}, "stores_is_unidentified": {"address": ["0x459C8E"], "explanation": "stores_is_unidentified reports whether the given item is magical and\nunidentified (i.e. it may be identified).", "args": [{"name": "item", "type": "Item *"}], "returns": {"type": "bool32_t"}}, "stores_talk_cain_identify": {"address": ["0x459CE6"], "psx_ref": ["0x8006E824"], "psx_def": ["void S_StartSIdentify__Fv()"], "explanation": "stores_talk_cain_identify initiates an identify item dialogue with Cain.", "args": [], "returns": {"type": "void"}}, "stores_talk_show_identified_item": {"address": ["0x459F95"], "psx_ref": ["0x8006F2C4"], "psx_def": ["void S_StartIdShow__Fv()"], "explanation": "stores_talk_show_identified_item shows the identified item to the player.", "args": [], "returns": {"type": "void"}}, "stores_talk_gossip": {"address": ["0x45A046"], "psx_ref": ["0x8006F49C"], "psx_def": ["void S_StartTalk__Fv()"], "explanation": "stores_talk_gossip initiates a gossip dialogue with the active NPC.", "args": [], "returns": {"type": "void"}}, "stores_talk_odgen": {"address": ["0x45A168"], "psx_ref": ["0x8006F6CC"], "psx_def": ["void S_StartTavern__Fv()"], "explanation": "stores_talk_odgen initiates a dialogue with Odgen.", "args": [], "returns": {"type": "void"}}, "stores_talk_gillian": {"address": ["0x45A1EC"], "psx_ref": ["0x8006F7C4"], "psx_def": ["void S_StartBarMaid__Fv()"], "explanation": "stores_talk_gillian initiates a dialogue with Gillian.", "args": [], "returns": {"type": "void"}}, "stores_talk_farnham": {"address": ["0x45A25E"], "psx_ref": ["0x8006F898"], "psx_def": ["void S_StartDrunk__Fv()"], "explanation": "stores_talk_farnham initiates a dialogue with Farnham.", "args": [], "returns": {"type": "void"}}, "stores_talk": {"address": ["0x45A2D0"], "psx_ref": ["0x8006F96C"], "psx_def": ["void StartStore__Fc(char s)"], "explanation": "stores_talk initiates a conversation with the store owner.", "args": [{"name": "talk_id", "type": "talk_id"}], "returns": {"type": "void"}}, "stores_draw": {"address": ["0x45A48F"], "explanation": "stores_draw renders a store owner dialogue on screen.", "args": [], "returns": {"type": "void"}}, "stores_escape": {"address": ["0x45A584"], "psx_ref": ["0x800700B4"], "psx_def": ["void STextESC__Fv()"], "explanation": "stores_escape backs out one level from the current dialogue through an escape\nkey press.", "args": [], "returns": {"type": "void"}}, "stores_interact_griswold": {"address": ["0x45A89B"], "psx_ref": ["0x80070570"], "psx_def": ["void S_SmithEnter__Fv()"], "explanation": "stores_interact_griswold interacts with Griswold through an enter key press.", "args": [], "returns": {"type": "void"}}, "stores_griswold_buy_basic": {"address": ["0x45AB69"], "psx_ref": ["0x80070B94"], "psx_def": ["void SmithBuyItem__Fv()"], "explanation": "stores_griswold_buy_basic buys the selected basic item from Griswold.", "args": [], "returns": {"type": "void"}}, "stores_interact_griswold_buy_basic": {"address": ["0x45AC14"], "psx_ref": ["0x80070E14"], "psx_def": ["void S_SBuyEnter__Fv()"], "explanation": "stores_interact_griswold_buy_basic buys the selected basic item from\nGriswold.", "args": [], "returns": {"type": "void"}}, "stores_griswold_buy_premium": {"address": ["0x45ACE9"], "psx_ref": ["0x80071078"], "psx_def": ["void SmithBuyPItem__Fv()"], "explanation": "stores_griswold_buy_premium buys the selected premium item from Griswold.", "args": [], "returns": {"type": "void"}}, "stores_interact_griswold_buy_premium": {"address": ["0x45AD7E"], "psx_ref": ["0x8007123C"], "psx_def": ["void S_SPBuyEnter__Fv()"], "explanation": "stores_interact_griswold_buy_premium buys the selected premium item from\nGriswold.", "args": [], "returns": {"type": "void"}}, "stores_sell": {"address": ["0x45B010"], "psx_ref": ["0x80071A00"], "psx_def": ["void StoreSellItem__Fv()"], "explanation": "stores_sell sells the selected item to the store owner.", "args": [], "returns": {"type": "void"}}, "stores_interact_griswold_sell": {"address": ["0x45B160"], "psx_ref": ["0x80071D44"], "psx_def": ["void S_SSellEnter__Fv()"], "explanation": "stores_interact_griswold_sell sells the selected item to Griswold.", "args": [], "returns": {"type": "void"}}, "stores_griswold_repair": {"address": ["0x45B1DF"], "psx_ref": ["0x80071E54"], "psx_def": ["void SmithRepairItem__Fv()"], "explanation": "stores_griswold_repair repairs the selected item at Griswold.", "args": [], "returns": {"type": "void"}}, "stores_interact_griswold_repair": {"address": ["0x45B2B6"], "psx_ref": ["0x800720C8"], "psx_def": ["void S_SRepairEnter__Fv()"], "explanation": "stores_interact_griswold_repair repairs the selected item at Griswold.", "args": [], "returns": {"type": "void"}}, "stores_interact_adria": {"address": ["0x45B337"], "psx_ref": ["0x8007222C"], "psx_def": ["void S_WitchEnter__Fv()"], "explanation": "stores_interact_adria interacts with Adria through an enter key press.", "args": [], "returns": {"type": "void"}}, "stores_adria_buy": {"address": ["0x45B39F"], "psx_ref": ["0x8007230C"], "psx_def": ["void WitchBuyItem__Fv()"], "explanation": "stores_adria_buy buys the selected item from Adria.", "args": [], "returns": {"type": "void"}}, "stores_interact_adria_buy": {"address": ["0x45B457"], "psx_ref": ["0x80072590"], "psx_def": ["void S_WBuyEnter__Fv()"], "explanation": "stores_interact_adria_buy buys the selected item from Adria.", "args": [], "returns": {"type": "void"}}, "stores_interact_adria_sell": {"address": ["0x45B52C"], "psx_ref": ["0x80072818"], "psx_def": ["void S_WSellEnter__Fv()"], "explanation": "stores_interact_adria_sell sells the selected item to Adria.", "args": [], "returns": {"type": "void"}}, "stores_adria_recharge": {"address": ["0x45B5AB"], "psx_ref": ["0x80072958"], "psx_def": ["void WitchRechargeItem__Fv()"], "explanation": "stores_adria_recharge recharges the selected item at Adria.", "args": [], "returns": {"type": "void"}}, "stores_interact_adria_recharge": {"address": ["0x45B634"], "psx_ref": ["0x80072AD4"], "psx_def": ["void S_WRechargeEnter__Fv()"], "explanation": "stores_interact_adria_recharge recharges the selected item at Adria.", "args": [], "returns": {"type": "void"}}, "stores_interact_wirt": {"address": ["0x45B6B5"], "psx_ref": ["0x80072C38"], "psx_def": ["void S_BoyEnter__Fv()"], "explanation": "stores_interact_wirt interacts with Wirt through an enter key press.", "args": [], "returns": {"type": "void"}}, "stores_wirt_buy": {"address": ["0x45B757"], "psx_ref": ["0x80072DD0"], "psx_def": ["void BoyBuyItem__Fv()"], "explanation": "stores_wirt_buy buys the selected item from Wirt.", "args": [], "returns": {"type": "void"}}, "stores_pepin_buy": {"address": ["0x45B791"], "psx_ref": ["0x80072E70"], "psx_def": ["void HealerBuyItem__Fv()"], "explanation": "stores_pepin_buy buys the selected item from Pepin.", "args": [], "returns": {"type": "void"}}, "stores_interact_wirt_buy": {"address": ["0x45B895"], "psx_ref": ["0x8007319C"], "psx_def": ["void S_BBuyEnter__Fv()"], "explanation": "stores_interact_wirt_buy buys the selected item from Wirt.", "args": [], "returns": {"type": "void"}}, "stores_cain_identify": {"address": ["0x45B968"], "psx_ref": ["0x800733B0"], "psx_def": ["void StoryIdItem__Fv()"], "explanation": "stores_cain_identify identifies the selected item at Cain.", "args": [], "returns": {"type": "void"}}, "stores_interact_confirm": {"address": ["0x45BA57"], "psx_ref": ["0x80073700"], "psx_def": ["void S_ConfirmEnter__Fv()"], "explanation": "stores_interact_confirm confirms the selected action.", "args": [], "returns": {"type": "void"}}, "stores_interact_pepin": {"address": ["0x45BAF7"], "psx_ref": ["0x8007381C"], "psx_def": ["void S_HealerEnter__Fv()"], "explanation": "stores_interact_pepin interacts with Pepin through an enter key press.", "args": [], "returns": {"type": "void"}}, "stores_interact_pepin_buy": {"address": ["0x45BB9F"], "psx_ref": ["0x800738B4"], "psx_def": ["void S_HBuyEnter__Fv()"], "explanation": "stores_interact_pepin_buy buys the selected item from Pepin.", "args": [], "returns": {"type": "void"}}, "stores_interact_cain": {"address": ["0x45BC74"], "psx_ref": ["0x80073AE8"], "psx_def": ["void S_StoryEnter__Fv()"], "explanation": "stores_interact_cain interacts with Cain through an enter key press.", "args": [], "returns": {"type": "void"}}, "stores_interact_cain_identify": {"address": ["0x45BCCA"], "psx_ref": ["0x80073B84"], "psx_def": ["void S_SIDEnter__Fv()"], "explanation": "stores_interact_cain_identify identifies the selected item at Cain.", "args": [], "returns": {"type": "void"}}, "stores_interact_gossip": {"address": ["0x45BD4B"], "psx_ref": ["0x80073D08"], "psx_def": ["void S_TalkEnter__Fv()"], "explanation": "stores_interact_gossip listens to the stories and gossip that a store owner\nhas to say about a given quest.", "args": [], "returns": {"type": "void"}}, "stores_interact_odgen": {"address": ["0x45BE4A"], "psx_ref": ["0x80073F08"], "psx_def": ["void S_TavernEnter__Fv()"], "explanation": "stores_interact_odgen interacts with Odgen through an enter key press.", "args": [], "returns": {"type": "void"}}, "stores_interact_gillian": {"address": ["0x45BE98"], "psx_ref": ["0x80073F7C"], "psx_def": ["void S_BarmaidEnter__Fv()"], "explanation": "stores_interact_gillian interacts with Gillian through an enter key press.", "args": [], "returns": {"type": "void"}}, "stores_interact_farnham": {"address": ["0x45BEE6"], "psx_ref": ["0x80073FF0"], "psx_def": ["void S_DrunkEnter__Fv()"], "explanation": "stores_interact_farmham interacts with Farnham through an enter key press.", "args": [], "returns": {"type": "void"}}, "stores_interact": {"address": ["0x45BF34"], "psx_ref": ["0x80074064"], "psx_def": ["void STextEnter__Fv()"], "explanation": "stores_interact interacts with the store through an enter key press.", "args": [], "returns": {"type": "void"}}, "tmsg_get": {"address": ["0x45E08C"], "explanation": "tmsg_get retreives the contents of a timed message from the queue.", "args": [{"name": "data", "type": "uint8_t *"}, {"name": "size", "type": "int"}], "returns": {"type": "int"}}, "tmsg_add": {"address": ["0x45E0D7"], "explanation": "tmsg_add adds a timed message to the queue, which will be processed 500 ms\nlater.", "args": [{"name": "msg", "type": "uint8_t *"}, {"name": "len", "type": "uint8_t"}], "returns": {"type": "void"}}, "tmsg_cleanup": {"address": ["0x45E12A"], "explanation": "tmsg_cleanup releases the resources of the timed messages queue.", "args": [], "returns": {"type": "void"}}, "town_draw_game": {"address": ["0x45F65D"], "explanation": "town_draw_game renders the game world in town on screen.", "args": [{"name": "col", "type": "int"}, {"name": "row", "type": "int"}], "returns": {"type": "void"}}, "town_draw_zoomed_game": {"address": ["0x45F856"], "explanation": "town_draw_zoomed_game renders a zoomed-in version of the game world in town\non screen.", "args": [{"name": "col", "type": "int"}, {"name": "row", "type": "int"}], "returns": {"type": "void"}}, "town_draw": {"address": ["0x45FAAB"], "explanation": "town_draw renders the UI and the game world in town on screen.", "args": [{"name": "col", "type": "int"}, {"name": "row", "type": "int"}], "returns": {"type": "void"}}, "towners_get_num_from_id": {"address": ["0x46019B"], "psx_ref": ["0x80039F88"], "psx_def": ["int GetActiveTowner__Fi(int t)"], "explanation": "towners_get_num_from_id returns the towner number (towners array index) of\nthe given towner ID.", "args": [{"name": "towner_id", "type": "towner_id"}], "returns": {"type": "int"}}, "towners_init_graphics": {"address": ["0x4601C1"], "psx_ref": ["0x80039FDC"], "psx_def": ["void SetTownerGPtrs__FPUcPPUc(unsigned char *pData, unsigned char **pAnim)"], "explanation": "towners_init_graphics initializes the NPC graphics for each direction.", "args": [{"name": "towner_cel", "type": "void *"}, {"name": "cel_from_direction", "type": "void **"}], "returns": {"type": "void"}}, "towners_init_anim": {"address": ["0x4601FB"], "psx_ref": ["0x80039FFC"], "psx_def": ["void NewTownerAnim__FiPUcii(int tnum, unsigned char *pAnim, int numFrames, int Delay)"], "explanation": "towners_init_anim initializes the animation of the given NPC.", "args": [{"name": "towner_num", "type": "int"}, {"name": "active_cel", "type": "void *"}, {"name": "nframes", "type": "int"}, {"name": "nticks_per_frame", "type": "int"}], "returns": {"type": "void"}}, "towners_place": {"address": ["0x46022F"], "psx_ref": ["0x8003A04C"], "psx_def": ["void InitTownerInfo__FilUciiici(int i, long w, unsigned char sel, int t, int x, int y, int ao, int tp)"], "explanation": "towners_place places the given NPC on the map.", "args": [{"name": "towner_num", "type": "int"}, {"name": "frame_width", "type": "int"}, {"name": "selectable", "type": "bool32_t"}, {"name": "towner_id", "type": "towner_id"}, {"name": "x", "type": "int"}, {"name": "y", "type": "int"}, {"name": "towner_anim_seq_id", "type": "towner_anim_seq_id"}, {"name": "unused", "type": "int"}], "returns": {"type": "void"}}, "towners_init_gossip": {"address": ["0x4602C4"], "psx_ref": ["0x8003A1A4"], "psx_def": ["void InitQstSnds__Fi(int i)"], "explanation": "towners_init_gossip initializes quest gossip of the given NPC.", "args": [{"name": "towner_num", "type": "int"}], "returns": {"type": "void"}}, "towners_init_griswold": {"address": ["0x460311"], "psx_ref": ["0x8003A264"], "psx_def": ["void InitSmith__Fv()"], "explanation": "towners_init_griswold initializes Griswold the Blacksmith.", "args": [], "returns": {"type": "void"}}, "towners_init_odgen": {"address": ["0x4603A0"], "psx_ref": ["0x8003A394"], "psx_def": ["void InitBarOwner__Fv()"], "explanation": "towners_init_odgen initializes Ogden the Tavern owner.", "args": [], "returns": {"type": "void"}}, "towners_init_wounded_townsman": {"address": ["0x460436"], "psx_ref": ["0x8003A4CC"], "psx_def": ["void InitTownDead__Fv()"], "explanation": "towners_init_wounded_townsman initializes the Wounded Townsman.", "args": [], "returns": {"type": "void"}}, "towners_init_adria": {"address": ["0x4604C6"], "psx_ref": ["0x8003A600"], "psx_def": ["void InitWitch__Fv()"], "explanation": "towners_init_adria initializes Adria the Witch.", "args": [], "returns": {"type": "void"}}, "towners_init_gillian": {"address": ["0x460555"], "psx_ref": ["0x8003A734"], "psx_def": ["void InitBarmaid__Fv()"], "explanation": "towners_init_gillian initializes Gillian the Barmaid.", "args": [], "returns": {"type": "void"}}, "towners_init_wirt": {"address": ["0x4605E4"], "psx_ref": ["0x8003A868"], "psx_def": ["void InitBoy__Fv()"], "explanation": "towners_init_wirt initializes Wirt the Peg-legged boy.", "args": [], "returns": {"type": "void"}}, "towners_init_pepin": {"address": ["0x46067A"], "psx_ref": ["0x8003A9A4"], "psx_def": ["void InitHealer__Fv()"], "explanation": "towners_init_pepin initializes Pepin the Healer.", "args": [], "returns": {"type": "void"}}, "towners_init_cain": {"address": ["0x460709"], "psx_ref": ["0x8003AAD8"], "psx_def": ["void InitTeller__Fv()"], "explanation": "towners_init_cain initializes Cain the Elder.", "args": [], "returns": {"type": "void"}}, "towners_init_farnham": {"address": ["0x460798"], "psx_ref": ["0x8003AC0C"], "psx_def": ["void InitDrunk__Fv()"], "explanation": "towners_init_farnham initializes Farnham the Drunk.", "args": [], "returns": {"type": "void"}}, "towners_init_cows": {"address": ["0x460827"], "psx_ref": ["0x8003AD40"], "psx_def": ["void InitCows__Fv()"], "explanation": "towners_init_cows initializes the Cow NPCs.", "args": [], "returns": {"type": "void"}}, "towners_init": {"address": ["0x460976"], "psx_ref": ["0x8003AFD8"], "psx_def": ["void InitTowners__Fv()"], "explanation": "towners_init initializes the NPCs of Tristram.", "args": [], "returns": {"type": "void"}}, "towners_cleanup": {"address": ["0x4609C3"], "psx_ref": ["0x8003B064"], "psx_def": ["void FreeTownerGFX__Fv()"], "explanation": "towners_cleanup releases resources used by NPCs.", "args": [], "returns": {"type": "void"}}, "towners_stop_interaction": {"address": ["0x460A05"], "psx_ref": ["0x8003B108"], "psx_def": ["void TownCtrlMsg__Fi(int i)"], "explanation": "towners_stop_interaction stops interaction with distant players.", "args": [{"name": "towner_num", "type": "int"}], "returns": {"type": "void"}}, "towners_process_logic_griswold": {"address": ["0x460A78"], "psx_ref": ["0x8003B1F0"], "psx_def": ["void TownBlackSmith__Fv()"], "explanation": "towners_process_logic_griswold processs the logic of Griswold each game tick;\nstops interaction with distant players.", "args": [], "returns": {"type": "void"}}, "towners_process_logic_ogden": {"address": ["0x460A86"], "psx_ref": ["0x8003B27C"], "psx_def": ["void TownBarOwner__Fv()"], "explanation": "towners_process_logic_ogden processs the logic of Ogden each game tick; stops\ninteraction with distant players.", "args": [], "returns": {"type": "void"}}, "towners_process_logic_wounded_townsman": {"address": ["0x460A95"], "psx_ref": ["0x8003B318"], "psx_def": ["void TownDead__Fv()"], "explanation": "towners_process_logic_wounded_townsman processs the logic of the Wounded\nTownsman each game tick; stops interaction with distant players, and updates\nquest events.", "args": [], "returns": {"type": "void"}}, "towners_process_logic_pepin": {"address": ["0x460B0D"], "psx_ref": ["0x8003B400"], "psx_def": ["void TownHealer__Fv()"], "explanation": "towners_process_logic_pepin processs the logic of Pepin each game tick; stops\ninteraction with distant players.", "args": [], "returns": {"type": "void"}}, "towners_process_logic_cain": {"address": ["0x460B1C"], "psx_ref": ["0x8003B428"], "psx_def": ["void TownStory__Fv()"], "explanation": "towners_process_logic_cain processs the logic of Cain each game tick; stops\ninteraction with distant players.", "args": [], "returns": {"type": "void"}}, "towners_process_logic_farnham": {"address": ["0x460B2B"], "psx_ref": ["0x8003B450"], "psx_def": ["void TownDrunk__Fv()"], "explanation": "towners_process_logic_farnham processs the logic of Farnham each game tick;\nstops interaction with distant players.", "args": [], "returns": {"type": "void"}}, "towners_process_logic_wirt": {"address": ["0x460B3A"], "psx_ref": ["0x8003B478"], "psx_def": ["void TownBoy__Fv()"], "explanation": "towners_process_logic_wirt processs the logic of Wirt each game tick; stops\ninteraction with distant players.", "args": [], "returns": {"type": "void"}}, "towners_process_logic_adria": {"address": ["0x460B49"], "psx_ref": ["0x8003B4A0"], "psx_def": ["void TownWitch__Fv()"], "explanation": "towners_process_logic_adria processs the logic of Adria each game tick; stops\ninteraction with distant players.", "args": [], "returns": {"type": "void"}}, "towners_process_logic_gillian": {"address": ["0x460B58"], "psx_ref": ["0x8003B4C8"], "psx_def": ["void TownBarMaid__Fv()"], "explanation": "towners_process_logic_gillian processs the logic of Gillain each game tick;\nstops interaction with distant players.", "args": [], "returns": {"type": "void"}}, "towners_process_logic_cows": {"address": ["0x460B67"], "psx_ref": ["0x8003B4F0"], "psx_def": ["void TownCow__Fv()"], "explanation": "towners_process_logic_cow processs the logic of the Cows each game tick;\nstops interaction with distant players.", "args": [], "returns": {"type": "void"}}, "towners_process": {"address": ["0x460B76"], "psx_ref": ["0x8003B518"], "psx_def": ["void ProcessTowners__Fv()"], "explanation": "towners_process processes any game state changes of the NPCs, since the last\ngame tick.", "args": [], "returns": {"type": "void"}}, "towners_find_player_item": {"address": ["0x460C5C"], "psx_ref": ["0x8003B768"], "psx_def": ["struct ItemStruct* PlrHasItem__FiiRi(int pnum, int item, int *i)"], "explanation": "towners_find_player_item locates the given item ID in the player's inventory.", "args": [{"name": "player_num", "type": "int"}, {"name": "item_id", "type": "item_id"}, {"name": "inv_item_num", "type": "int *"}], "returns": {"type": "Item *"}}, "towners_play_greeting": {"address": ["0x460CAC"], "psx_ref": ["0x8003B958"], "psx_def": ["void TownerTalk__Fii(int first, int t)"], "explanation": "towners_greeting plays the greeting of the given NPC.", "args": [{"name": "speech_id", "type": "speech_id"}], "returns": {"type": "void"}}, "towners_talk_with_towner": {"address": ["0x460CC9"], "psx_ref": ["0x8003B998"], "psx_def": ["void TalkToTowner__Fii(int p, int t)"], "explanation": "towners_talk_with_towner initiates a conversation with the given NPC.", "args": [{"name": "player_num", "type": "int"}, {"name": "towner_num", "type": "int"}], "returns": {"type": "void"}}, "towners_play_cow_sound": {"address": ["0x4617E8"], "psx_ref": ["0x8003B83C"], "psx_def": ["void CowSFX__Fi(int pnum)"], "explanation": "towners_play_cow_sound plays the Moo sound of a cow.", "args": [{"name": "player_num", "type": "int"}], "returns": {"type": "void"}}, "j_track_cpp_init": {"address": ["0x4618A5"], "explanation": "j_track_cpp_init initializes the C++ runtime of track.cpp.", "args": [], "returns": {"type": "void"}}, "track_cpp_init": {"address": ["0x4618AA"], "explanation": "track_cpp_init initializes the C++ runtime of track.cpp.", "args": [], "returns": {"type": "void"}}, "trigs_init_archbishop_lazarus_lair": {"address": ["0x4619A7"], "psx_ref": ["0x801621AC"], "psx_def": ["void InitNoTriggers__Fv()"], "explanation": "trigs_init_archbishop_lazarus_lair initializers triggers on Archbishop\nLazarus' Lair.", "args": [], "returns": {"type": "void"}}, "trigs_init_skeleton_kings_lair": {"address": ["0x461F0A"], "psx_ref": ["0x80162BF8"], "psx_def": ["void InitSKingTriggers__Fv()"], "explanation": "trigs_init_skeleton_kings_lair initializers triggers on Skeleton King's Lair.", "args": [], "returns": {"type": "void"}}, "trigs_init_bone_chamber": {"address": ["0x461F3A"], "psx_ref": ["0x80162C44"], "psx_def": ["void InitSChambTriggers__Fv()"], "explanation": "trigs_init_bone_chamber initializers triggers on the Bone Chamber.", "args": [], "returns": {"type": "void"}}, "trigs_init_poisoned_water_supply": {"address": ["0x461F6A"], "psx_ref": ["0x80162C90"], "psx_def": ["void InitPWaterTriggers__Fv()"], "explanation": "trigs_init_poisoned_water_supply initializers triggers on the Poisoned Water\nSupply.", "args": [], "returns": {"type": "void"}}, "j_wave_cpp_init": {"address": ["0x462C6D"], "explanation": "j_wave_cpp_init initializes the C++ runtime of wave.cpp.", "args": [], "returns": {"type": "void"}}, "wave_cpp_init": {"address": ["0x462C72"], "explanation": "wave_cpp_init initializes the C++ runtime of wave.cpp.", "args": [], "returns": {"type": "void"}}}, "files": {"appfat.cpp": {"functions": ["appfat_get_error_string", "appfat_get_DD_error_string", "appfat_get_DS_error_string", "appfat_get_last_error", "appfat_terminate_message_box", "appfat_message_box", "appfat_cleanup", "appfat_draw_message_box", "appfat_DD_assert", "appfat_DS_assert", "appfat_terminate_dialog_box", "appfat_dialog_box", "appfat_terminate_file_error_dialog", "appfat_terminate_disk_space_error_dialog", "appfat_terminate_insert_cd_error_dialog", "appfat_terminate_directory_error_dialog"]}, "automap.cpp": {"functions": ["automap_init", "automap_draw"]}, "capture.cpp": {"functions": ["capture_screenshot"]}, "codec.cpp": {"functions": ["codec_decode", "j_sha1_reset", "codec_init_key", "codec_get_encoded_len", "codec_encode"]}, "control.cpp": {"functions": ["control_draw_speedbook", "control_draw_life_orb", "control_draw_mana_orb", "control_load_graphics", "control_draw_panel_buttons", "control_cleanup", "control_draw_description_box", "control_draw_character_screen", "control_draw_level_up_button", "control_draw_durability_icons", "control_draw_red_hue", "control_get_spell_type", "control_draw_spellbook", "control_get_gold_quantity", "control_draw_gold_drop_box", "control_draw_talk_panel"]}, "cursor.cpp": {"functions": ["cursor_init_graphics", "cursor_cleanup", "cursor_set_item_cursor_id", "cursor_set", "j_cursor_set", "cursor_init_cursor_targets", "cursor_print_town_portal_text_on_hover", "cursor_print_red_portal_text_on_hover", "cursor_process"]}, "dead.cpp": {"functions": []}, "debug.cpp": {"functions": ["debug_load_graphics", "debug_cleanup"]}, "diablo.cpp": {"functions": ["j_diablo_cpp_init", "diablo_cpp_init", "diablo_cleanup_current_level", "diablo_cleanup", "diablo_get_not_running", "diablo_parse_flags", "diablo_load_level_graphics", "diablo_create_level", "diablo_load_game_level", "diablo_game_loop", "diablo_process_game_logic", "diablo_set_timeout_cursor"]}, "doom.cpp": {"functions": ["doom_draw"]}, "drlg_l1.cpp": {"functions": ["drlg_l1_reset_maps", "drlg_l1_load_dun", "drlg_l1_randomize_stone_floor", "drlg_l1_init_piece_id_map", "drlg_l1_init_arches", "drlg_l1_preload_dun", "drlg_l1_create_dungeon", "drlg_l1_load_quest_dun", "drlg_l1_free_quest_dun", "drlg_l1_generate_dungeon", "drlg_l1_place_door", "drlg_l1_init_shadows", "drlg_l1_place_miniset", "drlg_l1_reset", "drlg_l1_clear_flags", "drlg_l1_generate_first_room", "drlg_l1_add_room", "drlg_l1_generate_room", "drlg_l1_is_area_empty", "drlg_l1_get_area", "drlg_l1_init_tile_bit_map", "drlg_l1_generate_pattern", "drlg_l1_add_wall", "drlg_l1_get_horiz_wall_space", "drlg_l1_get_vert_wall_space", "drlg_l1_add_horiz_wall", "drlg_l1_add_vert_wall", "drlg_l1_fix_tiles", "drlg_l1_decorate", "drlg_l1_generate_chambers", "drlg_l1_generate_chamber", "drlg_l1_generate_hall", "drlg_l1_init_quest_dun", "drlg_l1_floor_transparency", "drlg_l1_floor_transparency_recursive", "drlg_l1_fix_transparency", "drlg_l1_fix_dirt", "drlg_l1_fix_corners"]}, "drlg_l2.cpp": {"functions": ["drlg_l2_fix_lockout", "drlg_l2_fix_doors", "drlg_l2_init_piece_id_map", "drlg_l2_create_dungeon", "drlg_l2_load_single_player_quest_dun", "drlg_l2_free_single_player_quest_dun", "drlg_l2_generate_dungeon", "drlg_l2_place_miniset", "drlg_l2_place_rand_miniset", "drlg_l2_decorate", "drlg_l2_init_shadows", "drlg_l2_init_quest_dun", "drlg_l2_fix_tiles", "drlg_l2_gen_dungeon", "drlg_l2_floor_transparency", "drlg_l2_fix_transparency", "drlg_l2_fix_dirt", "drlg_l2_init_arches"]}, "drlg_l3.cpp": {"functions": ["drlg_l3_create_dungeon", "drlg_l3_place_miniset"]}, "drlg_l4.cpp": {"functions": ["drlg_l4_create_dungeon"]}, "dthread.cpp": {"functions": ["j_dthread_cpp_init_1", "dthread_cpp_init_1", "dthread_cpp_init_2", "dthread_cleanup"]}, "dx.cpp": {"functions": ["j_dx_cpp_init_1", "dx_cpp_init_1", "dx_cpp_init_2", "dx_create_primary_surface", "dx_cleanup"]}, "effects.cpp": {"functions": ["j_effects_cpp_init", "effects_cpp_init", "effects_cleanup_sfx"]}, "encrypt.cpp": {"functions": ["encrypt_hash", "encrypt_init_lookup_table"]}, "engine.cpp": {"functions": ["j_engine_cpp_init_1", "engine_cpp_init_1", "engine_cel_decode_frame_content_into_buf", "engine_cel_decode_frame", "engine_cel_decode_frame_into_buf", "engine_cel_decode_frame_with_header", "engine_cel_decode_frame_with_header_into_buf", "engine_cel_decode_frame_content_with_light_into_buf", "engine_cel_decode_frame_content_with_light_and_transparency_into_buf", "engine_cel_decode_frame_with_light", "engine_cel_decode_frame_with_header_and_light", "engine_cel_decode_frame_with_header_light_and_transparency_into_buf", "engine_cel_decode_frame_with_header_and_light_not_equipable", "engine_cel_decode_frame_content_into_buf2", "engine_cel_decode_frame_with_header2", "engine_cel_decode_frame_with_header_into_buf2", "engine_cel_decode_frame_content_with_light_into_buf2", "engine_cel_decode_frame_content_with_light_and_transparency_into_buf2", "engine_cel_decode_frame_with_header_and_light2", "engine_cel_decode_frame_with_header_light_and_transparency_into_buf2", "engine_cel_decode_frame_with_header_and_light_not_equipable2", "engine_cel_decode_frame_into_rect_of_buf", "engine_cel_decode_frame_with_colour", "engine_cel_decode_frame_with_header_and_colour_highlight", "engine_set_seed", "engine_rand", "engine_rand_cap", "engine_cpp_init_2", "engine_init_mem_mutex", "engine_cleanup_mem_mutex_atexit", "engine_cleanup_mem_mutex", "engine_mem_alloc", "engine_mem_free", "engine_mem_load_file", "engine_mem_load_file_with"]}, "error.cpp": {"functions": ["error_draw"]}, "exception.cpp": {"functions": ["exception_cpp_init"]}, "gamemenu.cpp": {"functions": []}, "gendung.cpp": {"functions": ["gendung_init_transparency", "gendung_make_rect_transparent", "gendung_rect_transparent", "gendung_copy_transparency", "gendung_init_set_piece", "gendung_mark_set_piece", "gendung_place_theme_rooms", "gendung_init_levels"]}, "gmenu.cpp": {"functions": ["gmenu_draw_pause", "gmenu_draw"]}, "help.cpp": {"functions": ["help_draw"]}, "hero.cpp": {"functions": ["j_hero_cpp_init", "hero_cpp_init"]}, "init.cpp": {"functions": ["j_init_cpp_init", "init_cpp_init", "init_cleanup", "init_run_office_from_start_menu", "init_run_office", "init_disable_screensaver", "init_kill_mom_parent", "init_await_mom_parent_exit", "init_strip_trailing_slash", "init_get_file_info"]}, "interfac.cpp": {"functions": ["j_interfac_cpp_init", "interfac_cpp_init", "interfac_inc_progress", "interfac_draw_cut_scene"]}, "inv.cpp": {"functions": ["inv_cleanup", "inv_load_graphics", "inv_draw_inventory", "inv_draw_belt"]}, "items.cpp": {"functions": ["items_load_drop_graphics", "items_can_place", "items_add_init_items", "items_init", "items_calc_player_item_values", "items_create_from_item_id", "items_init_item_seed", "items_gen_seed", "items_create_player_starting_items", "items_get_rand_loot_id_from_monster", "items_draw_unique_item_box", "items_is_equipable", "items_create_base_gold", "items_update_stores_equipable"]}, "lighting.cpp": {"functions": []}, "loadsave.cpp": {"functions": ["loadsave_load_int8", "loadsave_load_int32", "loadsave_load_int32_2", "loadsave_load_bool", "loadsave_load_player", "loadsave_load_monster", "loadsave_load_missile", "loadsave_load_object", "loadsave_load_item", "loadsave_load_griswold_premium_item", "loadsave_load_quest"]}, "log.cpp": {"functions": ["j_log_cpp_init_1", "log_cpp_init_1", "log_cpp_init_2"]}, "mainmenu.cpp": {"functions": ["j_mainmenu_cpp_init", "mainmenu_cpp_init"]}, "minitext.cpp": {"functions": ["minitext_draw"]}, "missiles.cpp": {"functions": ["missiles_get_spell_damage"]}, "monster.cpp": {"functions": ["j_monster_cpp_init", "monster_cpp_init"]}, "movie.cpp": {"functions": ["j_movie_cpp_init", "movie_cpp_init"]}, "mpqapi.cpp": {"functions": ["j_mpqapi_cpp_init", "mpqapi_cpp_init", "mpqapi_set_hidden"]}, "msg.cpp": {"functions": ["j_msg_cpp_init", "msg_cpp_init", "msg_is_portal_inactive", "msg_send_cmd", "msg_send_cmd_coord", "msg_send_cmd_coord_param1", "msg_send_cmd_coord_param2", "msg_send_cmd_coord_param3", "msg_send_cmd_param1", "msg_send_cmd_param2", "msg_send_cmd_param3", "msg_send_cmd_sync_quest", "msg_send_cmd_get_item", "msg_parse_cmd_impact_mana_shield"]}, "msgcmd.cpp": {"functions": ["j_msgcmd_cpp_init_1", "msgcmd_cpp_init_1", "msgcmd_cpp_init_2"]}, "multi.cpp": {"functions": ["j_multi_cpp_init", "multi_cpp_init", "multi_cleanup"]}, "nthread.cpp": {"functions": ["j_nthread_cpp_init_1", "nthread_cpp_init_1", "nthread_cpp_init_2", "nthread_cleanup"]}, "objects.cpp": {"functions": ["objects_add_l1_objects", "objects_add_l2_objects", "objects_add_l3_objects", "objects_add_l2_torches", "objects_add_traps", "objects_add_object"]}, "palette.cpp": {"functions": ["j_palette_cpp_init", "palette_cpp_init", "palette_save_gamme", "palette_init", "palette_load_gamma", "palette_load_system_palette", "palette_load", "palette_load_rand_level_palette", "palette_realize", "palette_inc_gamma", "palette_update", "palette_apply_gamma_correction", "palette_dec_gamma", "palette_update_gamma", "palette_set_black_palette", "palette_set_brightness", "palette_brightness_fade_in", "palette_brightness_fade_out", "palette_update_caves", "palette_update_quest_palette", "palette_get_colour_cycling", "palette_set_color_cycling"]}, "path.cpp": {"functions": []}, "pfile.cpp": {"functions": ["j_pfile_cpp_init", "pfile_cpp_init", "pfile_init_save_directory", "pfile_check_available_space", "pfile_get_save_num_from_name", "pfile_get_save_path", "pfile_strcpy"]}, "player.cpp": {"functions": ["j_player_cpp_init", "player_cpp_init", "player_do_spell", "player_process", "player_init_dungeon_msgs"]}, "plrmsg.cpp": {"functions": ["plrmsg_draw"]}, "portal.cpp": {"functions": ["portal_init"]}, "quests.cpp": {"functions": ["quests_init", "quests_is_active", "quests_init_the_butcher_area", "quests_init_the_curse_of_king_leoric_area", "quests_init_warlord_of_blood_area", "quests_init_the_chamber_of_bone_area", "quests_init_odgens_sign_area", "quests_init_halls_of_the_blind_area", "quests_init_valor_area", "quests_init_quest_area", "quests_draw_quest_log"]}, "README.md": {"functions": []}, "restricted.cpp": {"functions": ["restricted_has_write_access"]}, "scrollrt.cpp": {"functions": ["j_scrollrt_cpp_init", "scrollrt_cpp_init", "scrollrt_draw", "scrollrt_draw_game", "scrollrt_draw_zoomed_game"]}, "setmaps.cpp": {"functions": ["setmaps_get_object_num", "setmaps_add_objects_on_skeleton_kings_lair", "setmaps_add_objects_bone_chamber", "setmaps_add_objects_archbishop_lazarus_lair", "setmaps_load_transparency", "setmaps_load_quest_level"]}, "sha1.cpp": {"functions": ["sha1_reset", "sha1_final", "sha1", "sha1_update", "sha1_transform", "sha1_init"]}, "sound.cpp": {"functions": ["j_sound_cpp_init", "sound_cpp_init", "sound_update", "sound_file_stop", "sound_file_is_playing", "sound_file_play", "sound_dup_channel", "sound_file_reload", "sound_file_load", "sound_CreateSoundBuffer", "sound_file_cleanup", "sound_init", "sound_load_volume", "sound_create_primary_buffer", "sound_DirectSoundCreate", "sound_cleanup", "sound_store_volume", "sound_stop_music", "sound_start_music", "sound_disable_music", "sound_get_or_set_music_volume", "sound_get_or_set_sound_volume"]}, "spells.cpp": {"functions": ["spell_get_mana_cost", "spell_use_mana", "spell_can_cast", "spell_cast", "spell_cast_resurrect", "spell_resurrect", "spell_cast_heal_other"]}, "stores.cpp": {"functions": ["stores_init", "stores_renew_items", "stores_cleanup", "stores_talk_griswold", "stores_talk_griswold_buy_basic", "stores_talk_griswold_buy_premium", "stores_griswold_wants", "stores_talk_griswold_sell", "stores_is_damaged", "stores_talk_griswold_repair", "stores_talk_adria", "stores_talk_adria_buy", "stores_adria_wants", "stores_talk_adria_sell", "stores_has_used_charges", "stores_talk_adria_recharge", "stores_talk_not_enough_gold", "stores_talk_not_enough_room", "stores_talk_confirm", "stores_talk_wirt", "stores_talk_wirt_buy", "stores_talk_pepin", "stores_talk_pepin_buy", "stores_talk_cain", "stores_is_unidentified", "stores_talk_cain_identify", "stores_talk_show_identified_item", "stores_talk_gossip", "stores_talk_odgen", "stores_talk_gillian", "stores_talk_farnham", "stores_talk", "stores_draw", "stores_escape", "stores_interact_griswold", "stores_griswold_buy_basic", "stores_interact_griswold_buy_basic", "stores_griswold_buy_premium", "stores_interact_griswold_buy_premium", "stores_sell", "stores_interact_griswold_sell", "stores_griswold_repair", "stores_interact_griswold_repair", "stores_interact_adria", "stores_adria_buy", "stores_interact_adria_buy", "stores_interact_adria_sell", "stores_adria_recharge", "stores_interact_adria_recharge", "stores_interact_wirt", "stores_wirt_buy", "stores_pepin_buy", "stores_interact_wirt_buy", "stores_cain_identify", "stores_interact_confirm", "stores_interact_pepin", "stores_interact_pepin_buy", "stores_interact_cain", "stores_interact_cain_identify", "stores_interact_gossip", "stores_interact_odgen", "stores_interact_gillian", "stores_interact_farnham", "stores_interact"]}, "sync.cpp": {"functions": []}, "themes.cpp": {"functions": []}, "tmsg.cpp": {"functions": ["tmsg_get", "tmsg_add", "tmsg_cleanup"]}, "town.cpp": {"functions": ["town_draw_game", "town_draw_zoomed_game", "town_draw"]}, "towners.cpp": {"functions": ["towners_get_num_from_id", "towners_init_graphics", "towners_init_anim", "towners_place", "towners_init_gossip", "towners_init_griswold", "towners_init_odgen", "towners_init_wounded_townsman", "towners_init_adria", "towners_init_gillian", "towners_init_wirt", "towners_init_pepin", "towners_init_cain", "towners_init_farnham", "towners_init_cows", "towners_init", "towners_cleanup", "towners_stop_interaction", "towners_process_logic_griswold", "towners_process_logic_ogden", "towners_process_logic_wounded_townsman", "towners_process_logic_pepin", "towners_process_logic_cain", "towners_process_logic_farnham", "towners_process_logic_wirt", "towners_process_logic_adria", "towners_process_logic_gillian", "towners_process_logic_cows", "towners_process", "towners_find_player_item", "towners_play_greeting", "towners_talk_with_towner", "towners_play_cow_sound"]}, "track.cpp": {"functions": ["j_track_cpp_init", "track_cpp_init"]}, "trigs.cpp": {"functions": ["trigs_init_archbishop_lazarus_lair", "trigs_init_skeleton_kings_lair", "trigs_init_bone_chamber", "trigs_init_poisoned_water_supply"]}, "wave.cpp": {"functions": ["j_wave_cpp_init", "wave_cpp_init"]}, "world.cpp": {"functions": []}}, "types": {}, "vars": {}}