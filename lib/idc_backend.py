# data is dict specified by extract.py (unstable)
def write_header (fp):
	fp.write ('// Generated by Scripture (https://github.com/predelnik/scripture)\n')
	fp.write ("// Warning: script will aggressively change name of the functions and redefine structs if there's name collision. Use with care.\n")
	fp.write ('\n')
	fp.write ('#include <idc.idc>\n')
	fp.write ('static main() {\n')
	for bits in ['8', '16', '32']:
		for prefix in [('u', 'unsigned '), ('', '')]:
			for body in ['int', 'bool']:
				if body == 'bool' and prefix[0] == 'u':
					continue
				source_type = '{}{}{}_t'.format (prefix[0], body, bits)
				dest_type = '{} __int{}'.format (prefix[1], bits)
				fp.write ('if (find_custom_data_type("{}") == -1)\n'.format (source_type))
				fp.write ('  set_local_type (-1, "typedef {} {}", 0);\n'.format (dest_type, source_type))

def write_structs (data, fp):
	for name, struct_data in sorted(list (data['structs'].items()), key=lambda t: t[1]['line']):
		# Removing previously defined struct to avoid collision
		fp.write ('{\n')
		fp.write ('id = get_struc_id ("{}");\n'.format (name))
		fp.write ('if (id != -1)\n')
		fp.write ('del_struc(id);\n')
		fp.write ('parse_decls("{}", 0);\n'.format (struct_data['text'].replace ('\n', '\\n').replace ('\r', '\\r').replace ('"', '\\"')))
		fp.write ('import_type(-1, "{}");'.format (name))
		fp.write ('}\n')

def write_enums (data, fp):
	for name, enum_data in sorted(list (data['enums'].items()), key=lambda t: t[1]['line']):
		# Removing previously defined struct to avoid collision
		fp.write ('id = get_enum ("{}");\n'.format (name))
		fp.write ('if (id != -1)\n')
		fp.write ('del_enum(id);\n')
		# it's yet unclear how to make enum signed, but looks like in IDA 7.0 it doesn't affect anything anyway
		fp.write ('id = add_enum (-1, "{}", {});\n'.format (name, 'FF_0NUMH' if 'bitflag' in enum_data else 'FF_0NUMD'))
		for member in enum_data['members']:
			fp.write ('add_enum_member (id, "{}", {}, -1);\n'.format (member['name'], member['value']))
		if 'bitflag' in enum_data:
			fp.write ('set_enum_bf (id, 1);\n')

def write_funcs (data, fp):
	for name, func_data in data['functions'].items():
		if not 'address' in func_data:
			continue
		fp.write ('set_name({}, "{}");\n'.format (func_data['address'], name))
		fp.write ('apply_type ({}, "{}", TINFO_DEFINITE);\n'.format (func_data['address'], func_data['text']))

def write_vars (data, fp):
	for name, var_data in data['vars'].items():
		if not 'address' in var_data:
			continue
		fp.write ('set_name({}, "{}");\n'.format (var_data['address'], name))
		fp.write ('apply_type ({}, "{}", TINFO_DEFINITE);\n'.format (var_data['address'], var_data['text']))

def write_idc (data, target_filename, src_path):
	fp = open (target_filename, 'w')
	write_header (fp)
	fp.write ('auto id = -1;')
	write_enums (data, fp)
	write_structs (data, fp)
	write_funcs(data, fp)
	write_vars(data, fp)
	fp.write('}\n')
